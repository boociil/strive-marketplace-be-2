
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Users
 * 
 */
export type Users = $Result.DefaultSelection<Prisma.$UsersPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Transaksi
 * 
 */
export type Transaksi = $Result.DefaultSelection<Prisma.$TransaksiPayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>
/**
 * Model Likes
 * 
 */
export type Likes = $Result.DefaultSelection<Prisma.$LikesPayload>
/**
 * Model Alamat
 * 
 */
export type Alamat = $Result.DefaultSelection<Prisma.$AlamatPayload>
/**
 * Model Pengajuan
 * 
 */
export type Pengajuan = $Result.DefaultSelection<Prisma.$PengajuanPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.users`: Exposes CRUD operations for the **Users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.UsersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaksi`: Exposes CRUD operations for the **Transaksi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transaksis
    * const transaksis = await prisma.transaksi.findMany()
    * ```
    */
  get transaksi(): Prisma.TransaksiDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.likes`: Exposes CRUD operations for the **Likes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.likes.findMany()
    * ```
    */
  get likes(): Prisma.LikesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.alamat`: Exposes CRUD operations for the **Alamat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Alamats
    * const alamats = await prisma.alamat.findMany()
    * ```
    */
  get alamat(): Prisma.AlamatDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pengajuan`: Exposes CRUD operations for the **Pengajuan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pengajuans
    * const pengajuans = await prisma.pengajuan.findMany()
    * ```
    */
  get pengajuan(): Prisma.PengajuanDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Users: 'Users',
    Product: 'Product',
    Transaksi: 'Transaksi',
    Review: 'Review',
    Likes: 'Likes',
    Alamat: 'Alamat',
    Pengajuan: 'Pengajuan'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "users" | "product" | "transaksi" | "review" | "likes" | "alamat" | "pengajuan"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Users: {
        payload: Prisma.$UsersPayload<ExtArgs>
        fields: Prisma.UsersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UsersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UsersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findFirst: {
            args: Prisma.UsersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UsersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          findMany: {
            args: Prisma.UsersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          create: {
            args: Prisma.UsersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          createMany: {
            args: Prisma.UsersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UsersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          delete: {
            args: Prisma.UsersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          update: {
            args: Prisma.UsersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          deleteMany: {
            args: Prisma.UsersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UsersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UsersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>[]
          }
          upsert: {
            args: Prisma.UsersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UsersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.UsersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.UsersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Transaksi: {
        payload: Prisma.$TransaksiPayload<ExtArgs>
        fields: Prisma.TransaksiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransaksiFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransaksiFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          findFirst: {
            args: Prisma.TransaksiFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransaksiFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          findMany: {
            args: Prisma.TransaksiFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>[]
          }
          create: {
            args: Prisma.TransaksiCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          createMany: {
            args: Prisma.TransaksiCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransaksiCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>[]
          }
          delete: {
            args: Prisma.TransaksiDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          update: {
            args: Prisma.TransaksiUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          deleteMany: {
            args: Prisma.TransaksiDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransaksiUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransaksiUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>[]
          }
          upsert: {
            args: Prisma.TransaksiUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransaksiPayload>
          }
          aggregate: {
            args: Prisma.TransaksiAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaksi>
          }
          groupBy: {
            args: Prisma.TransaksiGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransaksiGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransaksiCountArgs<ExtArgs>
            result: $Utils.Optional<TransaksiCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReviewUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
      Likes: {
        payload: Prisma.$LikesPayload<ExtArgs>
        fields: Prisma.LikesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LikesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LikesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          findFirst: {
            args: Prisma.LikesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LikesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          findMany: {
            args: Prisma.LikesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>[]
          }
          create: {
            args: Prisma.LikesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          createMany: {
            args: Prisma.LikesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LikesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>[]
          }
          delete: {
            args: Prisma.LikesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          update: {
            args: Prisma.LikesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          deleteMany: {
            args: Prisma.LikesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LikesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LikesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>[]
          }
          upsert: {
            args: Prisma.LikesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LikesPayload>
          }
          aggregate: {
            args: Prisma.LikesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLikes>
          }
          groupBy: {
            args: Prisma.LikesGroupByArgs<ExtArgs>
            result: $Utils.Optional<LikesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LikesCountArgs<ExtArgs>
            result: $Utils.Optional<LikesCountAggregateOutputType> | number
          }
        }
      }
      Alamat: {
        payload: Prisma.$AlamatPayload<ExtArgs>
        fields: Prisma.AlamatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlamatFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlamatFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>
          }
          findFirst: {
            args: Prisma.AlamatFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlamatFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>
          }
          findMany: {
            args: Prisma.AlamatFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>[]
          }
          create: {
            args: Prisma.AlamatCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>
          }
          createMany: {
            args: Prisma.AlamatCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlamatCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>[]
          }
          delete: {
            args: Prisma.AlamatDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>
          }
          update: {
            args: Prisma.AlamatUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>
          }
          deleteMany: {
            args: Prisma.AlamatDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlamatUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlamatUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>[]
          }
          upsert: {
            args: Prisma.AlamatUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlamatPayload>
          }
          aggregate: {
            args: Prisma.AlamatAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlamat>
          }
          groupBy: {
            args: Prisma.AlamatGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlamatGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlamatCountArgs<ExtArgs>
            result: $Utils.Optional<AlamatCountAggregateOutputType> | number
          }
        }
      }
      Pengajuan: {
        payload: Prisma.$PengajuanPayload<ExtArgs>
        fields: Prisma.PengajuanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PengajuanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PengajuanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>
          }
          findFirst: {
            args: Prisma.PengajuanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PengajuanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>
          }
          findMany: {
            args: Prisma.PengajuanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>[]
          }
          create: {
            args: Prisma.PengajuanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>
          }
          createMany: {
            args: Prisma.PengajuanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PengajuanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>[]
          }
          delete: {
            args: Prisma.PengajuanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>
          }
          update: {
            args: Prisma.PengajuanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>
          }
          deleteMany: {
            args: Prisma.PengajuanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PengajuanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PengajuanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>[]
          }
          upsert: {
            args: Prisma.PengajuanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PengajuanPayload>
          }
          aggregate: {
            args: Prisma.PengajuanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePengajuan>
          }
          groupBy: {
            args: Prisma.PengajuanGroupByArgs<ExtArgs>
            result: $Utils.Optional<PengajuanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PengajuanCountArgs<ExtArgs>
            result: $Utils.Optional<PengajuanCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    users?: UsersOmit
    product?: ProductOmit
    transaksi?: TransaksiOmit
    review?: ReviewOmit
    likes?: LikesOmit
    alamat?: AlamatOmit
    pengajuan?: PengajuanOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    alamat: number
    product: number
    transaksi: number
    review: number
    likes: number
    pengajuan: number
    accBy: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    alamat?: boolean | UsersCountOutputTypeCountAlamatArgs
    product?: boolean | UsersCountOutputTypeCountProductArgs
    transaksi?: boolean | UsersCountOutputTypeCountTransaksiArgs
    review?: boolean | UsersCountOutputTypeCountReviewArgs
    likes?: boolean | UsersCountOutputTypeCountLikesArgs
    pengajuan?: boolean | UsersCountOutputTypeCountPengajuanArgs
    accBy?: boolean | UsersCountOutputTypeCountAccByArgs
  }

  // Custom InputTypes
  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAlamatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlamatWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaksiWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikesWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountPengajuanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PengajuanWhereInput
  }

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountAccByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PengajuanWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    transaksi: number
    review: number
    likes: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaksi?: boolean | ProductCountOutputTypeCountTransaksiArgs
    review?: boolean | ProductCountOutputTypeCountReviewArgs
    likes?: boolean | ProductCountOutputTypeCountLikesArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountTransaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaksiWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountReviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikesWhereInput
  }


  /**
   * Count Type AlamatCountOutputType
   */

  export type AlamatCountOutputType = {
    toko: number
  }

  export type AlamatCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    toko?: boolean | AlamatCountOutputTypeCountTokoArgs
  }

  // Custom InputTypes
  /**
   * AlamatCountOutputType without action
   */
  export type AlamatCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlamatCountOutputType
     */
    select?: AlamatCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlamatCountOutputType without action
   */
  export type AlamatCountOutputTypeCountTokoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    gender: number | null
    role: number | null
    buka_toko: number | null
    klasifikasi_toko: number | null
    rating_toko: number | null
    alamat_toko: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: number | null
    gender: number | null
    role: number | null
    buka_toko: number | null
    klasifikasi_toko: number | null
    rating_toko: number | null
    alamat_toko: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    gender: number | null
    role: number | null
    telp: string | null
    buka_toko: number | null
    nama_toko: string | null
    klasifikasi_toko: number | null
    rating_toko: number | null
    alamat_toko: number | null
  }

  export type UsersMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    gender: number | null
    role: number | null
    telp: string | null
    buka_toko: number | null
    nama_toko: string | null
    klasifikasi_toko: number | null
    rating_toko: number | null
    alamat_toko: number | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    gender: number
    role: number
    telp: number
    buka_toko: number
    nama_toko: number
    klasifikasi_toko: number
    rating_toko: number
    alamat_toko: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    gender?: true
    role?: true
    buka_toko?: true
    klasifikasi_toko?: true
    rating_toko?: true
    alamat_toko?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    gender?: true
    role?: true
    buka_toko?: true
    klasifikasi_toko?: true
    rating_toko?: true
    alamat_toko?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    gender?: true
    role?: true
    telp?: true
    buka_toko?: true
    nama_toko?: true
    klasifikasi_toko?: true
    rating_toko?: true
    alamat_toko?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    gender?: true
    role?: true
    telp?: true
    buka_toko?: true
    nama_toko?: true
    klasifikasi_toko?: true
    rating_toko?: true
    alamat_toko?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    gender?: true
    role?: true
    telp?: true
    buka_toko?: true
    nama_toko?: true
    klasifikasi_toko?: true
    rating_toko?: true
    alamat_toko?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to aggregate.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithAggregationInput | UsersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: UsersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender: number
    role: number
    telp: string
    buka_toko: number
    nama_toko: string
    klasifikasi_toko: number
    rating_toko: number
    alamat_toko: number | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type UsersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    gender?: boolean
    role?: boolean
    telp?: boolean
    buka_toko?: boolean
    nama_toko?: boolean
    klasifikasi_toko?: boolean
    rating_toko?: boolean
    alamat_toko?: boolean
    almt_tk?: boolean | Users$almt_tkArgs<ExtArgs>
    alamat?: boolean | Users$alamatArgs<ExtArgs>
    product?: boolean | Users$productArgs<ExtArgs>
    transaksi?: boolean | Users$transaksiArgs<ExtArgs>
    review?: boolean | Users$reviewArgs<ExtArgs>
    likes?: boolean | Users$likesArgs<ExtArgs>
    pengajuan?: boolean | Users$pengajuanArgs<ExtArgs>
    accBy?: boolean | Users$accByArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    gender?: boolean
    role?: boolean
    telp?: boolean
    buka_toko?: boolean
    nama_toko?: boolean
    klasifikasi_toko?: boolean
    rating_toko?: boolean
    alamat_toko?: boolean
    almt_tk?: boolean | Users$almt_tkArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    gender?: boolean
    role?: boolean
    telp?: boolean
    buka_toko?: boolean
    nama_toko?: boolean
    klasifikasi_toko?: boolean
    rating_toko?: boolean
    alamat_toko?: boolean
    almt_tk?: boolean | Users$almt_tkArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type UsersSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    gender?: boolean
    role?: boolean
    telp?: boolean
    buka_toko?: boolean
    nama_toko?: boolean
    klasifikasi_toko?: boolean
    rating_toko?: boolean
    alamat_toko?: boolean
  }

  export type UsersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "password" | "firstName" | "lastName" | "gender" | "role" | "telp" | "buka_toko" | "nama_toko" | "klasifikasi_toko" | "rating_toko" | "alamat_toko", ExtArgs["result"]["users"]>
  export type UsersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    almt_tk?: boolean | Users$almt_tkArgs<ExtArgs>
    alamat?: boolean | Users$alamatArgs<ExtArgs>
    product?: boolean | Users$productArgs<ExtArgs>
    transaksi?: boolean | Users$transaksiArgs<ExtArgs>
    review?: boolean | Users$reviewArgs<ExtArgs>
    likes?: boolean | Users$likesArgs<ExtArgs>
    pengajuan?: boolean | Users$pengajuanArgs<ExtArgs>
    accBy?: boolean | Users$accByArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UsersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    almt_tk?: boolean | Users$almt_tkArgs<ExtArgs>
  }
  export type UsersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    almt_tk?: boolean | Users$almt_tkArgs<ExtArgs>
  }

  export type $UsersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Users"
    objects: {
      almt_tk: Prisma.$AlamatPayload<ExtArgs> | null
      alamat: Prisma.$AlamatPayload<ExtArgs>[]
      product: Prisma.$ProductPayload<ExtArgs>[]
      transaksi: Prisma.$TransaksiPayload<ExtArgs>[]
      review: Prisma.$ReviewPayload<ExtArgs>[]
      likes: Prisma.$LikesPayload<ExtArgs>[]
      pengajuan: Prisma.$PengajuanPayload<ExtArgs>[]
      accBy: Prisma.$PengajuanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      firstName: string
      lastName: string
      gender: number
      role: number
      telp: string
      buka_toko: number
      nama_toko: string
      klasifikasi_toko: number
      rating_toko: number
      alamat_toko: number | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type UsersGetPayload<S extends boolean | null | undefined | UsersDefaultArgs> = $Result.GetResult<Prisma.$UsersPayload, S>

  type UsersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UsersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface UsersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Users'], meta: { name: 'Users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {UsersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UsersFindUniqueArgs>(args: SelectSubset<T, UsersFindUniqueArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UsersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UsersFindUniqueOrThrowArgs>(args: SelectSubset<T, UsersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UsersFindFirstArgs>(args?: SelectSubset<T, UsersFindFirstArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UsersFindFirstOrThrowArgs>(args?: SelectSubset<T, UsersFindFirstOrThrowArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UsersFindManyArgs>(args?: SelectSubset<T, UsersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Users.
     * @param {UsersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends UsersCreateArgs>(args: SelectSubset<T, UsersCreateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UsersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UsersCreateManyArgs>(args?: SelectSubset<T, UsersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UsersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UsersCreateManyAndReturnArgs>(args?: SelectSubset<T, UsersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Users.
     * @param {UsersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends UsersDeleteArgs>(args: SelectSubset<T, UsersDeleteArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Users.
     * @param {UsersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UsersUpdateArgs>(args: SelectSubset<T, UsersUpdateArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UsersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UsersDeleteManyArgs>(args?: SelectSubset<T, UsersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UsersUpdateManyArgs>(args: SelectSubset<T, UsersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UsersUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const usersWithIdOnly = await prisma.users.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UsersUpdateManyAndReturnArgs>(args: SelectSubset<T, UsersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Users.
     * @param {UsersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends UsersUpsertArgs>(args: SelectSubset<T, UsersUpsertArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UsersCountArgs>(
      args?: Subset<T, UsersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Users model
   */
  readonly fields: UsersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UsersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    almt_tk<T extends Users$almt_tkArgs<ExtArgs> = {}>(args?: Subset<T, Users$almt_tkArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    alamat<T extends Users$alamatArgs<ExtArgs> = {}>(args?: Subset<T, Users$alamatArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    product<T extends Users$productArgs<ExtArgs> = {}>(args?: Subset<T, Users$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transaksi<T extends Users$transaksiArgs<ExtArgs> = {}>(args?: Subset<T, Users$transaksiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    review<T extends Users$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Users$reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends Users$likesArgs<ExtArgs> = {}>(args?: Subset<T, Users$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    pengajuan<T extends Users$pengajuanArgs<ExtArgs> = {}>(args?: Subset<T, Users$pengajuanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accBy<T extends Users$accByArgs<ExtArgs> = {}>(args?: Subset<T, Users$accByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Users model
   */
  interface UsersFieldRefs {
    readonly id: FieldRef<"Users", 'Int'>
    readonly email: FieldRef<"Users", 'String'>
    readonly password: FieldRef<"Users", 'String'>
    readonly firstName: FieldRef<"Users", 'String'>
    readonly lastName: FieldRef<"Users", 'String'>
    readonly gender: FieldRef<"Users", 'Int'>
    readonly role: FieldRef<"Users", 'Int'>
    readonly telp: FieldRef<"Users", 'String'>
    readonly buka_toko: FieldRef<"Users", 'Int'>
    readonly nama_toko: FieldRef<"Users", 'String'>
    readonly klasifikasi_toko: FieldRef<"Users", 'Int'>
    readonly rating_toko: FieldRef<"Users", 'Float'>
    readonly alamat_toko: FieldRef<"Users", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Users findUnique
   */
  export type UsersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findUniqueOrThrow
   */
  export type UsersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users findFirst
   */
  export type UsersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findFirstOrThrow
   */
  export type UsersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users findMany
   */
  export type UsersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UsersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UsersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Users create
   */
  export type UsersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to create a Users.
     */
    data: XOR<UsersCreateInput, UsersUncheckedCreateInput>
  }

  /**
   * Users createMany
   */
  export type UsersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Users createManyAndReturn
   */
  export type UsersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UsersCreateManyInput | UsersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Users update
   */
  export type UsersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The data needed to update a Users.
     */
    data: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
    /**
     * Choose, which Users to update.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users updateMany
   */
  export type UsersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * Users updateManyAndReturn
   */
  export type UsersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Users upsert
   */
  export type UsersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * The filter to search for the Users to update in case it exists.
     */
    where: UsersWhereUniqueInput
    /**
     * In case the Users found by the `where` argument doesn't exist, create a new Users with this data.
     */
    create: XOR<UsersCreateInput, UsersUncheckedCreateInput>
    /**
     * In case the Users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UsersUpdateInput, UsersUncheckedUpdateInput>
  }

  /**
   * Users delete
   */
  export type UsersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    /**
     * Filter which Users to delete.
     */
    where: UsersWhereUniqueInput
  }

  /**
   * Users deleteMany
   */
  export type UsersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UsersWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * Users.almt_tk
   */
  export type Users$almt_tkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    where?: AlamatWhereInput
  }

  /**
   * Users.alamat
   */
  export type Users$alamatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    where?: AlamatWhereInput
    orderBy?: AlamatOrderByWithRelationInput | AlamatOrderByWithRelationInput[]
    cursor?: AlamatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlamatScalarFieldEnum | AlamatScalarFieldEnum[]
  }

  /**
   * Users.product
   */
  export type Users$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Users.transaksi
   */
  export type Users$transaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    where?: TransaksiWhereInput
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    cursor?: TransaksiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Users.review
   */
  export type Users$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Users.likes
   */
  export type Users$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    where?: LikesWhereInput
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    cursor?: LikesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }

  /**
   * Users.pengajuan
   */
  export type Users$pengajuanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    where?: PengajuanWhereInput
    orderBy?: PengajuanOrderByWithRelationInput | PengajuanOrderByWithRelationInput[]
    cursor?: PengajuanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PengajuanScalarFieldEnum | PengajuanScalarFieldEnum[]
  }

  /**
   * Users.accBy
   */
  export type Users$accByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    where?: PengajuanWhereInput
    orderBy?: PengajuanOrderByWithRelationInput | PengajuanOrderByWithRelationInput[]
    cursor?: PengajuanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PengajuanScalarFieldEnum | PengajuanScalarFieldEnum[]
  }

  /**
   * Users without action
   */
  export type UsersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    stock: number | null
    harga: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    userId: number | null
    stock: number | null
    harga: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    userId: number | null
    nama: string | null
    stock: number | null
    harga: number | null
    desc: string | null
    path: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    nama: string | null
    stock: number | null
    harga: number | null
    desc: string | null
    path: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    userId: number
    nama: number
    stock: number
    harga: number
    desc: number
    path: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    userId?: true
    stock?: true
    harga?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    userId?: true
    stock?: true
    harga?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    userId?: true
    nama?: true
    stock?: true
    harga?: true
    desc?: true
    path?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    userId?: true
    nama?: true
    stock?: true
    harga?: true
    desc?: true
    path?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    userId?: true
    nama?: true
    stock?: true
    harga?: true
    desc?: true
    path?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    userId: number
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nama?: boolean
    stock?: boolean
    harga?: boolean
    desc?: boolean
    path?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    transaksi?: boolean | Product$transaksiArgs<ExtArgs>
    review?: boolean | Product$reviewArgs<ExtArgs>
    likes?: boolean | Product$likesArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nama?: boolean
    stock?: boolean
    harga?: boolean
    desc?: boolean
    path?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    nama?: boolean
    stock?: boolean
    harga?: boolean
    desc?: boolean
    path?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    userId?: boolean
    nama?: boolean
    stock?: boolean
    harga?: boolean
    desc?: boolean
    path?: boolean
  }

  export type ProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "nama" | "stock" | "harga" | "desc" | "path", ExtArgs["result"]["product"]>
  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    transaksi?: boolean | Product$transaksiArgs<ExtArgs>
    review?: boolean | Product$reviewArgs<ExtArgs>
    likes?: boolean | Product$likesArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type ProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      transaksi: Prisma.$TransaksiPayload<ExtArgs>[]
      review: Prisma.$ReviewPayload<ExtArgs>[]
      likes: Prisma.$LikesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      nama: string
      stock: number
      harga: number
      desc: string
      path: string
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products and returns the data updated in the database.
     * @param {ProductUpdateManyAndReturnArgs} args - Arguments to update many Products.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Products and only return the `id`
     * const productWithIdOnly = await prisma.product.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProductUpdateManyAndReturnArgs>(args: SelectSubset<T, ProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transaksi<T extends Product$transaksiArgs<ExtArgs> = {}>(args?: Subset<T, Product$transaksiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    review<T extends Product$reviewArgs<ExtArgs> = {}>(args?: Subset<T, Product$reviewArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    likes<T extends Product$likesArgs<ExtArgs> = {}>(args?: Subset<T, Product$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly userId: FieldRef<"Product", 'Int'>
    readonly nama: FieldRef<"Product", 'String'>
    readonly stock: FieldRef<"Product", 'Int'>
    readonly harga: FieldRef<"Product", 'Int'>
    readonly desc: FieldRef<"Product", 'String'>
    readonly path: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
  }

  /**
   * Product updateManyAndReturn
   */
  export type ProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
    /**
     * Limit how many Products to delete.
     */
    limit?: number
  }

  /**
   * Product.transaksi
   */
  export type Product$transaksiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    where?: TransaksiWhereInput
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    cursor?: TransaksiWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Product.review
   */
  export type Product$reviewArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Product.likes
   */
  export type Product$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    where?: LikesWhereInput
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    cursor?: LikesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Product
     */
    omit?: ProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Transaksi
   */

  export type AggregateTransaksi = {
    _count: TransaksiCountAggregateOutputType | null
    _avg: TransaksiAvgAggregateOutputType | null
    _sum: TransaksiSumAggregateOutputType | null
    _min: TransaksiMinAggregateOutputType | null
    _max: TransaksiMaxAggregateOutputType | null
  }

  export type TransaksiAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    status: number | null
  }

  export type TransaksiSumAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    status: number | null
  }

  export type TransaksiMinAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    status: number | null
  }

  export type TransaksiMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    status: number | null
  }

  export type TransaksiCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    status: number
    _all: number
  }


  export type TransaksiAvgAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    status?: true
  }

  export type TransaksiSumAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    status?: true
  }

  export type TransaksiMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    status?: true
  }

  export type TransaksiMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    status?: true
  }

  export type TransaksiCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    status?: true
    _all?: true
  }

  export type TransaksiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaksi to aggregate.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transaksis
    **/
    _count?: true | TransaksiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransaksiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransaksiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransaksiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransaksiMaxAggregateInputType
  }

  export type GetTransaksiAggregateType<T extends TransaksiAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaksi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaksi[P]>
      : GetScalarType<T[P], AggregateTransaksi[P]>
  }




  export type TransaksiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransaksiWhereInput
    orderBy?: TransaksiOrderByWithAggregationInput | TransaksiOrderByWithAggregationInput[]
    by: TransaksiScalarFieldEnum[] | TransaksiScalarFieldEnum
    having?: TransaksiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransaksiCountAggregateInputType | true
    _avg?: TransaksiAvgAggregateInputType
    _sum?: TransaksiSumAggregateInputType
    _min?: TransaksiMinAggregateInputType
    _max?: TransaksiMaxAggregateInputType
  }

  export type TransaksiGroupByOutputType = {
    id: number
    userId: number
    productId: number
    status: number
    _count: TransaksiCountAggregateOutputType | null
    _avg: TransaksiAvgAggregateOutputType | null
    _sum: TransaksiSumAggregateOutputType | null
    _min: TransaksiMinAggregateOutputType | null
    _max: TransaksiMaxAggregateOutputType | null
  }

  type GetTransaksiGroupByPayload<T extends TransaksiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransaksiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransaksiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransaksiGroupByOutputType[P]>
            : GetScalarType<T[P], TransaksiGroupByOutputType[P]>
        }
      >
    >


  export type TransaksiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    status?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaksi"]>

  export type TransaksiSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    status?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaksi"]>

  export type TransaksiSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    status?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaksi"]>

  export type TransaksiSelectScalar = {
    id?: boolean
    userId?: boolean
    productId?: boolean
    status?: boolean
  }

  export type TransaksiOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "productId" | "status", ExtArgs["result"]["transaksi"]>
  export type TransaksiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type TransaksiIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type TransaksiIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $TransaksiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaksi"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      productId: number
      status: number
    }, ExtArgs["result"]["transaksi"]>
    composites: {}
  }

  type TransaksiGetPayload<S extends boolean | null | undefined | TransaksiDefaultArgs> = $Result.GetResult<Prisma.$TransaksiPayload, S>

  type TransaksiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransaksiFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransaksiCountAggregateInputType | true
    }

  export interface TransaksiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaksi'], meta: { name: 'Transaksi' } }
    /**
     * Find zero or one Transaksi that matches the filter.
     * @param {TransaksiFindUniqueArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransaksiFindUniqueArgs>(args: SelectSubset<T, TransaksiFindUniqueArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaksi that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransaksiFindUniqueOrThrowArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransaksiFindUniqueOrThrowArgs>(args: SelectSubset<T, TransaksiFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaksi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindFirstArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransaksiFindFirstArgs>(args?: SelectSubset<T, TransaksiFindFirstArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaksi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindFirstOrThrowArgs} args - Arguments to find a Transaksi
     * @example
     * // Get one Transaksi
     * const transaksi = await prisma.transaksi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransaksiFindFirstOrThrowArgs>(args?: SelectSubset<T, TransaksiFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transaksis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transaksis
     * const transaksis = await prisma.transaksi.findMany()
     * 
     * // Get first 10 Transaksis
     * const transaksis = await prisma.transaksi.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transaksiWithIdOnly = await prisma.transaksi.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransaksiFindManyArgs>(args?: SelectSubset<T, TransaksiFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaksi.
     * @param {TransaksiCreateArgs} args - Arguments to create a Transaksi.
     * @example
     * // Create one Transaksi
     * const Transaksi = await prisma.transaksi.create({
     *   data: {
     *     // ... data to create a Transaksi
     *   }
     * })
     * 
     */
    create<T extends TransaksiCreateArgs>(args: SelectSubset<T, TransaksiCreateArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transaksis.
     * @param {TransaksiCreateManyArgs} args - Arguments to create many Transaksis.
     * @example
     * // Create many Transaksis
     * const transaksi = await prisma.transaksi.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransaksiCreateManyArgs>(args?: SelectSubset<T, TransaksiCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transaksis and returns the data saved in the database.
     * @param {TransaksiCreateManyAndReturnArgs} args - Arguments to create many Transaksis.
     * @example
     * // Create many Transaksis
     * const transaksi = await prisma.transaksi.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transaksis and only return the `id`
     * const transaksiWithIdOnly = await prisma.transaksi.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransaksiCreateManyAndReturnArgs>(args?: SelectSubset<T, TransaksiCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaksi.
     * @param {TransaksiDeleteArgs} args - Arguments to delete one Transaksi.
     * @example
     * // Delete one Transaksi
     * const Transaksi = await prisma.transaksi.delete({
     *   where: {
     *     // ... filter to delete one Transaksi
     *   }
     * })
     * 
     */
    delete<T extends TransaksiDeleteArgs>(args: SelectSubset<T, TransaksiDeleteArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaksi.
     * @param {TransaksiUpdateArgs} args - Arguments to update one Transaksi.
     * @example
     * // Update one Transaksi
     * const transaksi = await prisma.transaksi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransaksiUpdateArgs>(args: SelectSubset<T, TransaksiUpdateArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transaksis.
     * @param {TransaksiDeleteManyArgs} args - Arguments to filter Transaksis to delete.
     * @example
     * // Delete a few Transaksis
     * const { count } = await prisma.transaksi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransaksiDeleteManyArgs>(args?: SelectSubset<T, TransaksiDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transaksis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transaksis
     * const transaksi = await prisma.transaksi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransaksiUpdateManyArgs>(args: SelectSubset<T, TransaksiUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transaksis and returns the data updated in the database.
     * @param {TransaksiUpdateManyAndReturnArgs} args - Arguments to update many Transaksis.
     * @example
     * // Update many Transaksis
     * const transaksi = await prisma.transaksi.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transaksis and only return the `id`
     * const transaksiWithIdOnly = await prisma.transaksi.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransaksiUpdateManyAndReturnArgs>(args: SelectSubset<T, TransaksiUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaksi.
     * @param {TransaksiUpsertArgs} args - Arguments to update or create a Transaksi.
     * @example
     * // Update or create a Transaksi
     * const transaksi = await prisma.transaksi.upsert({
     *   create: {
     *     // ... data to create a Transaksi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaksi we want to update
     *   }
     * })
     */
    upsert<T extends TransaksiUpsertArgs>(args: SelectSubset<T, TransaksiUpsertArgs<ExtArgs>>): Prisma__TransaksiClient<$Result.GetResult<Prisma.$TransaksiPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transaksis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiCountArgs} args - Arguments to filter Transaksis to count.
     * @example
     * // Count the number of Transaksis
     * const count = await prisma.transaksi.count({
     *   where: {
     *     // ... the filter for the Transaksis we want to count
     *   }
     * })
    **/
    count<T extends TransaksiCountArgs>(
      args?: Subset<T, TransaksiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransaksiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaksi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransaksiAggregateArgs>(args: Subset<T, TransaksiAggregateArgs>): Prisma.PrismaPromise<GetTransaksiAggregateType<T>>

    /**
     * Group by Transaksi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransaksiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransaksiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransaksiGroupByArgs['orderBy'] }
        : { orderBy?: TransaksiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransaksiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransaksiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaksi model
   */
  readonly fields: TransaksiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaksi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransaksiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaksi model
   */
  interface TransaksiFieldRefs {
    readonly id: FieldRef<"Transaksi", 'Int'>
    readonly userId: FieldRef<"Transaksi", 'Int'>
    readonly productId: FieldRef<"Transaksi", 'Int'>
    readonly status: FieldRef<"Transaksi", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Transaksi findUnique
   */
  export type TransaksiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where: TransaksiWhereUniqueInput
  }

  /**
   * Transaksi findUniqueOrThrow
   */
  export type TransaksiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where: TransaksiWhereUniqueInput
  }

  /**
   * Transaksi findFirst
   */
  export type TransaksiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transaksis.
     */
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Transaksi findFirstOrThrow
   */
  export type TransaksiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksi to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transaksis.
     */
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Transaksi findMany
   */
  export type TransaksiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter, which Transaksis to fetch.
     */
    where?: TransaksiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transaksis to fetch.
     */
    orderBy?: TransaksiOrderByWithRelationInput | TransaksiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transaksis.
     */
    cursor?: TransaksiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transaksis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transaksis.
     */
    skip?: number
    distinct?: TransaksiScalarFieldEnum | TransaksiScalarFieldEnum[]
  }

  /**
   * Transaksi create
   */
  export type TransaksiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaksi.
     */
    data: XOR<TransaksiCreateInput, TransaksiUncheckedCreateInput>
  }

  /**
   * Transaksi createMany
   */
  export type TransaksiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transaksis.
     */
    data: TransaksiCreateManyInput | TransaksiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaksi createManyAndReturn
   */
  export type TransaksiCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * The data used to create many Transaksis.
     */
    data: TransaksiCreateManyInput | TransaksiCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaksi update
   */
  export type TransaksiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaksi.
     */
    data: XOR<TransaksiUpdateInput, TransaksiUncheckedUpdateInput>
    /**
     * Choose, which Transaksi to update.
     */
    where: TransaksiWhereUniqueInput
  }

  /**
   * Transaksi updateMany
   */
  export type TransaksiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transaksis.
     */
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyInput>
    /**
     * Filter which Transaksis to update
     */
    where?: TransaksiWhereInput
    /**
     * Limit how many Transaksis to update.
     */
    limit?: number
  }

  /**
   * Transaksi updateManyAndReturn
   */
  export type TransaksiUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * The data used to update Transaksis.
     */
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyInput>
    /**
     * Filter which Transaksis to update
     */
    where?: TransaksiWhereInput
    /**
     * Limit how many Transaksis to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaksi upsert
   */
  export type TransaksiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaksi to update in case it exists.
     */
    where: TransaksiWhereUniqueInput
    /**
     * In case the Transaksi found by the `where` argument doesn't exist, create a new Transaksi with this data.
     */
    create: XOR<TransaksiCreateInput, TransaksiUncheckedCreateInput>
    /**
     * In case the Transaksi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransaksiUpdateInput, TransaksiUncheckedUpdateInput>
  }

  /**
   * Transaksi delete
   */
  export type TransaksiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
    /**
     * Filter which Transaksi to delete.
     */
    where: TransaksiWhereUniqueInput
  }

  /**
   * Transaksi deleteMany
   */
  export type TransaksiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaksis to delete
     */
    where?: TransaksiWhereInput
    /**
     * Limit how many Transaksis to delete.
     */
    limit?: number
  }

  /**
   * Transaksi without action
   */
  export type TransaksiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaksi
     */
    select?: TransaksiSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaksi
     */
    omit?: TransaksiOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransaksiInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    review: string | null
    rating: number | null
  }

  export type ReviewMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    review: string | null
    rating: number | null
  }

  export type ReviewCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    review: number
    rating: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    review?: true
    rating?: true
  }

  export type ReviewMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    review?: true
    rating?: true
  }

  export type ReviewCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    review?: true
    rating?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    id: number
    userId: number
    productId: number
    review: string
    rating: number
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    review?: boolean
    rating?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    review?: boolean
    rating?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    review?: boolean
    rating?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    id?: boolean
    userId?: boolean
    productId?: boolean
    review?: boolean
    rating?: boolean
  }

  export type ReviewOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "productId" | "review" | "rating", ExtArgs["result"]["review"]>
  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      productId: number
      review: string
      rating: number
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reviewWithIdOnly = await prisma.review.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews and returns the data updated in the database.
     * @param {ReviewUpdateManyAndReturnArgs} args - Arguments to update many Reviews.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reviews and only return the `id`
     * const reviewWithIdOnly = await prisma.review.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReviewUpdateManyAndReturnArgs>(args: SelectSubset<T, ReviewUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */
  interface ReviewFieldRefs {
    readonly id: FieldRef<"Review", 'Int'>
    readonly userId: FieldRef<"Review", 'Int'>
    readonly productId: FieldRef<"Review", 'Int'>
    readonly review: FieldRef<"Review", 'String'>
    readonly rating: FieldRef<"Review", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
  }

  /**
   * Review updateManyAndReturn
   */
  export type ReviewUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
    /**
     * Limit how many Reviews to delete.
     */
    limit?: number
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Review
     */
    omit?: ReviewOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Model Likes
   */

  export type AggregateLikes = {
    _count: LikesCountAggregateOutputType | null
    _avg: LikesAvgAggregateOutputType | null
    _sum: LikesSumAggregateOutputType | null
    _min: LikesMinAggregateOutputType | null
    _max: LikesMaxAggregateOutputType | null
  }

  export type LikesAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
  }

  export type LikesSumAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
  }

  export type LikesMinAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    time: Date | null
  }

  export type LikesMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    productId: number | null
    time: Date | null
  }

  export type LikesCountAggregateOutputType = {
    id: number
    userId: number
    productId: number
    time: number
    _all: number
  }


  export type LikesAvgAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
  }

  export type LikesSumAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
  }

  export type LikesMinAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    time?: true
  }

  export type LikesMaxAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    time?: true
  }

  export type LikesCountAggregateInputType = {
    id?: true
    userId?: true
    productId?: true
    time?: true
    _all?: true
  }

  export type LikesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to aggregate.
     */
    where?: LikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    _count?: true | LikesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikesMaxAggregateInputType
  }

  export type GetLikesAggregateType<T extends LikesAggregateArgs> = {
        [P in keyof T & keyof AggregateLikes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLikes[P]>
      : GetScalarType<T[P], AggregateLikes[P]>
  }




  export type LikesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LikesWhereInput
    orderBy?: LikesOrderByWithAggregationInput | LikesOrderByWithAggregationInput[]
    by: LikesScalarFieldEnum[] | LikesScalarFieldEnum
    having?: LikesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikesCountAggregateInputType | true
    _avg?: LikesAvgAggregateInputType
    _sum?: LikesSumAggregateInputType
    _min?: LikesMinAggregateInputType
    _max?: LikesMaxAggregateInputType
  }

  export type LikesGroupByOutputType = {
    id: number
    userId: number
    productId: number
    time: Date
    _count: LikesCountAggregateOutputType | null
    _avg: LikesAvgAggregateOutputType | null
    _sum: LikesSumAggregateOutputType | null
    _min: LikesMinAggregateOutputType | null
    _max: LikesMaxAggregateOutputType | null
  }

  type GetLikesGroupByPayload<T extends LikesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LikesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikesGroupByOutputType[P]>
            : GetScalarType<T[P], LikesGroupByOutputType[P]>
        }
      >
    >


  export type LikesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    time?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likes"]>

  export type LikesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    time?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likes"]>

  export type LikesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    productId?: boolean
    time?: boolean
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["likes"]>

  export type LikesSelectScalar = {
    id?: boolean
    userId?: boolean
    productId?: boolean
    time?: boolean
  }

  export type LikesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "productId" | "time", ExtArgs["result"]["likes"]>
  export type LikesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type LikesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type LikesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UsersDefaultArgs<ExtArgs>
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $LikesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Likes"
    objects: {
      user: Prisma.$UsersPayload<ExtArgs>
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      productId: number
      time: Date
    }, ExtArgs["result"]["likes"]>
    composites: {}
  }

  type LikesGetPayload<S extends boolean | null | undefined | LikesDefaultArgs> = $Result.GetResult<Prisma.$LikesPayload, S>

  type LikesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LikesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LikesCountAggregateInputType | true
    }

  export interface LikesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Likes'], meta: { name: 'Likes' } }
    /**
     * Find zero or one Likes that matches the filter.
     * @param {LikesFindUniqueArgs} args - Arguments to find a Likes
     * @example
     * // Get one Likes
     * const likes = await prisma.likes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LikesFindUniqueArgs>(args: SelectSubset<T, LikesFindUniqueArgs<ExtArgs>>): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Likes that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LikesFindUniqueOrThrowArgs} args - Arguments to find a Likes
     * @example
     * // Get one Likes
     * const likes = await prisma.likes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LikesFindUniqueOrThrowArgs>(args: SelectSubset<T, LikesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesFindFirstArgs} args - Arguments to find a Likes
     * @example
     * // Get one Likes
     * const likes = await prisma.likes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LikesFindFirstArgs>(args?: SelectSubset<T, LikesFindFirstArgs<ExtArgs>>): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Likes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesFindFirstOrThrowArgs} args - Arguments to find a Likes
     * @example
     * // Get one Likes
     * const likes = await prisma.likes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LikesFindFirstOrThrowArgs>(args?: SelectSubset<T, LikesFindFirstOrThrowArgs<ExtArgs>>): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Likes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.likes.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.likes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likesWithIdOnly = await prisma.likes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LikesFindManyArgs>(args?: SelectSubset<T, LikesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Likes.
     * @param {LikesCreateArgs} args - Arguments to create a Likes.
     * @example
     * // Create one Likes
     * const Likes = await prisma.likes.create({
     *   data: {
     *     // ... data to create a Likes
     *   }
     * })
     * 
     */
    create<T extends LikesCreateArgs>(args: SelectSubset<T, LikesCreateArgs<ExtArgs>>): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Likes.
     * @param {LikesCreateManyArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const likes = await prisma.likes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LikesCreateManyArgs>(args?: SelectSubset<T, LikesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Likes and returns the data saved in the database.
     * @param {LikesCreateManyAndReturnArgs} args - Arguments to create many Likes.
     * @example
     * // Create many Likes
     * const likes = await prisma.likes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Likes and only return the `id`
     * const likesWithIdOnly = await prisma.likes.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LikesCreateManyAndReturnArgs>(args?: SelectSubset<T, LikesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Likes.
     * @param {LikesDeleteArgs} args - Arguments to delete one Likes.
     * @example
     * // Delete one Likes
     * const Likes = await prisma.likes.delete({
     *   where: {
     *     // ... filter to delete one Likes
     *   }
     * })
     * 
     */
    delete<T extends LikesDeleteArgs>(args: SelectSubset<T, LikesDeleteArgs<ExtArgs>>): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Likes.
     * @param {LikesUpdateArgs} args - Arguments to update one Likes.
     * @example
     * // Update one Likes
     * const likes = await prisma.likes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LikesUpdateArgs>(args: SelectSubset<T, LikesUpdateArgs<ExtArgs>>): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Likes.
     * @param {LikesDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.likes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LikesDeleteManyArgs>(args?: SelectSubset<T, LikesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const likes = await prisma.likes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LikesUpdateManyArgs>(args: SelectSubset<T, LikesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likes and returns the data updated in the database.
     * @param {LikesUpdateManyAndReturnArgs} args - Arguments to update many Likes.
     * @example
     * // Update many Likes
     * const likes = await prisma.likes.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Likes and only return the `id`
     * const likesWithIdOnly = await prisma.likes.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LikesUpdateManyAndReturnArgs>(args: SelectSubset<T, LikesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Likes.
     * @param {LikesUpsertArgs} args - Arguments to update or create a Likes.
     * @example
     * // Update or create a Likes
     * const likes = await prisma.likes.upsert({
     *   create: {
     *     // ... data to create a Likes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Likes we want to update
     *   }
     * })
     */
    upsert<T extends LikesUpsertArgs>(args: SelectSubset<T, LikesUpsertArgs<ExtArgs>>): Prisma__LikesClient<$Result.GetResult<Prisma.$LikesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesCountArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.likes.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count<T extends LikesCountArgs>(
      args?: Subset<T, LikesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikesAggregateArgs>(args: Subset<T, LikesAggregateArgs>): Prisma.PrismaPromise<GetLikesAggregateType<T>>

    /**
     * Group by Likes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikesGroupByArgs['orderBy'] }
        : { orderBy?: LikesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Likes model
   */
  readonly fields: LikesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Likes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LikesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Likes model
   */
  interface LikesFieldRefs {
    readonly id: FieldRef<"Likes", 'Int'>
    readonly userId: FieldRef<"Likes", 'Int'>
    readonly productId: FieldRef<"Likes", 'Int'>
    readonly time: FieldRef<"Likes", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Likes findUnique
   */
  export type LikesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where: LikesWhereUniqueInput
  }

  /**
   * Likes findUniqueOrThrow
   */
  export type LikesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where: LikesWhereUniqueInput
  }

  /**
   * Likes findFirst
   */
  export type LikesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }

  /**
   * Likes findFirstOrThrow
   */
  export type LikesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
     */
    cursor?: LikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likes.
     */
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }

  /**
   * Likes findMany
   */
  export type LikesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter, which Likes to fetch.
     */
    where?: LikesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likes to fetch.
     */
    orderBy?: LikesOrderByWithRelationInput | LikesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
     */
    cursor?: LikesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
     */
    skip?: number
    distinct?: LikesScalarFieldEnum | LikesScalarFieldEnum[]
  }

  /**
   * Likes create
   */
  export type LikesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * The data needed to create a Likes.
     */
    data: XOR<LikesCreateInput, LikesUncheckedCreateInput>
  }

  /**
   * Likes createMany
   */
  export type LikesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Likes.
     */
    data: LikesCreateManyInput | LikesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Likes createManyAndReturn
   */
  export type LikesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * The data used to create many Likes.
     */
    data: LikesCreateManyInput | LikesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Likes update
   */
  export type LikesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * The data needed to update a Likes.
     */
    data: XOR<LikesUpdateInput, LikesUncheckedUpdateInput>
    /**
     * Choose, which Likes to update.
     */
    where: LikesWhereUniqueInput
  }

  /**
   * Likes updateMany
   */
  export type LikesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Likes.
     */
    data: XOR<LikesUpdateManyMutationInput, LikesUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikesWhereInput
    /**
     * Limit how many Likes to update.
     */
    limit?: number
  }

  /**
   * Likes updateManyAndReturn
   */
  export type LikesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * The data used to update Likes.
     */
    data: XOR<LikesUpdateManyMutationInput, LikesUncheckedUpdateManyInput>
    /**
     * Filter which Likes to update
     */
    where?: LikesWhereInput
    /**
     * Limit how many Likes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Likes upsert
   */
  export type LikesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * The filter to search for the Likes to update in case it exists.
     */
    where: LikesWhereUniqueInput
    /**
     * In case the Likes found by the `where` argument doesn't exist, create a new Likes with this data.
     */
    create: XOR<LikesCreateInput, LikesUncheckedCreateInput>
    /**
     * In case the Likes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LikesUpdateInput, LikesUncheckedUpdateInput>
  }

  /**
   * Likes delete
   */
  export type LikesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
    /**
     * Filter which Likes to delete.
     */
    where: LikesWhereUniqueInput
  }

  /**
   * Likes deleteMany
   */
  export type LikesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Likes to delete
     */
    where?: LikesWhereInput
    /**
     * Limit how many Likes to delete.
     */
    limit?: number
  }

  /**
   * Likes without action
   */
  export type LikesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Likes
     */
    select?: LikesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Likes
     */
    omit?: LikesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LikesInclude<ExtArgs> | null
  }


  /**
   * Model Alamat
   */

  export type AggregateAlamat = {
    _count: AlamatCountAggregateOutputType | null
    _avg: AlamatAvgAggregateOutputType | null
    _sum: AlamatSumAggregateOutputType | null
    _min: AlamatMinAggregateOutputType | null
    _max: AlamatMaxAggregateOutputType | null
  }

  export type AlamatAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AlamatSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AlamatMinAggregateOutputType = {
    id: number | null
    userId: number | null
    provinsi: string | null
    kabupaten: string | null
    kecamatan: string | null
    desa: string | null
    kode_pos: string | null
    detail: string | null
    catatan: string | null
  }

  export type AlamatMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    provinsi: string | null
    kabupaten: string | null
    kecamatan: string | null
    desa: string | null
    kode_pos: string | null
    detail: string | null
    catatan: string | null
  }

  export type AlamatCountAggregateOutputType = {
    id: number
    userId: number
    provinsi: number
    kabupaten: number
    kecamatan: number
    desa: number
    kode_pos: number
    detail: number
    catatan: number
    _all: number
  }


  export type AlamatAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AlamatSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AlamatMinAggregateInputType = {
    id?: true
    userId?: true
    provinsi?: true
    kabupaten?: true
    kecamatan?: true
    desa?: true
    kode_pos?: true
    detail?: true
    catatan?: true
  }

  export type AlamatMaxAggregateInputType = {
    id?: true
    userId?: true
    provinsi?: true
    kabupaten?: true
    kecamatan?: true
    desa?: true
    kode_pos?: true
    detail?: true
    catatan?: true
  }

  export type AlamatCountAggregateInputType = {
    id?: true
    userId?: true
    provinsi?: true
    kabupaten?: true
    kecamatan?: true
    desa?: true
    kode_pos?: true
    detail?: true
    catatan?: true
    _all?: true
  }

  export type AlamatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alamat to aggregate.
     */
    where?: AlamatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alamats to fetch.
     */
    orderBy?: AlamatOrderByWithRelationInput | AlamatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlamatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alamats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alamats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Alamats
    **/
    _count?: true | AlamatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlamatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlamatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlamatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlamatMaxAggregateInputType
  }

  export type GetAlamatAggregateType<T extends AlamatAggregateArgs> = {
        [P in keyof T & keyof AggregateAlamat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlamat[P]>
      : GetScalarType<T[P], AggregateAlamat[P]>
  }




  export type AlamatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlamatWhereInput
    orderBy?: AlamatOrderByWithAggregationInput | AlamatOrderByWithAggregationInput[]
    by: AlamatScalarFieldEnum[] | AlamatScalarFieldEnum
    having?: AlamatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlamatCountAggregateInputType | true
    _avg?: AlamatAvgAggregateInputType
    _sum?: AlamatSumAggregateInputType
    _min?: AlamatMinAggregateInputType
    _max?: AlamatMaxAggregateInputType
  }

  export type AlamatGroupByOutputType = {
    id: number
    userId: number
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail: string
    catatan: string
    _count: AlamatCountAggregateOutputType | null
    _avg: AlamatAvgAggregateOutputType | null
    _sum: AlamatSumAggregateOutputType | null
    _min: AlamatMinAggregateOutputType | null
    _max: AlamatMaxAggregateOutputType | null
  }

  type GetAlamatGroupByPayload<T extends AlamatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlamatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlamatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlamatGroupByOutputType[P]>
            : GetScalarType<T[P], AlamatGroupByOutputType[P]>
        }
      >
    >


  export type AlamatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provinsi?: boolean
    kabupaten?: boolean
    kecamatan?: boolean
    desa?: boolean
    kode_pos?: boolean
    detail?: boolean
    catatan?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    toko?: boolean | Alamat$tokoArgs<ExtArgs>
    _count?: boolean | AlamatCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alamat"]>

  export type AlamatSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provinsi?: boolean
    kabupaten?: boolean
    kecamatan?: boolean
    desa?: boolean
    kode_pos?: boolean
    detail?: boolean
    catatan?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alamat"]>

  export type AlamatSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    provinsi?: boolean
    kabupaten?: boolean
    kecamatan?: boolean
    desa?: boolean
    kode_pos?: boolean
    detail?: boolean
    catatan?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["alamat"]>

  export type AlamatSelectScalar = {
    id?: boolean
    userId?: boolean
    provinsi?: boolean
    kabupaten?: boolean
    kecamatan?: boolean
    desa?: boolean
    kode_pos?: boolean
    detail?: boolean
    catatan?: boolean
  }

  export type AlamatOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "provinsi" | "kabupaten" | "kecamatan" | "desa" | "kode_pos" | "detail" | "catatan", ExtArgs["result"]["alamat"]>
  export type AlamatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    toko?: boolean | Alamat$tokoArgs<ExtArgs>
    _count?: boolean | AlamatCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlamatIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type AlamatIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $AlamatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Alamat"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>
      toko: Prisma.$UsersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      provinsi: string
      kabupaten: string
      kecamatan: string
      desa: string
      kode_pos: string
      detail: string
      catatan: string
    }, ExtArgs["result"]["alamat"]>
    composites: {}
  }

  type AlamatGetPayload<S extends boolean | null | undefined | AlamatDefaultArgs> = $Result.GetResult<Prisma.$AlamatPayload, S>

  type AlamatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlamatFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlamatCountAggregateInputType | true
    }

  export interface AlamatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Alamat'], meta: { name: 'Alamat' } }
    /**
     * Find zero or one Alamat that matches the filter.
     * @param {AlamatFindUniqueArgs} args - Arguments to find a Alamat
     * @example
     * // Get one Alamat
     * const alamat = await prisma.alamat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlamatFindUniqueArgs>(args: SelectSubset<T, AlamatFindUniqueArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Alamat that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlamatFindUniqueOrThrowArgs} args - Arguments to find a Alamat
     * @example
     * // Get one Alamat
     * const alamat = await prisma.alamat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlamatFindUniqueOrThrowArgs>(args: SelectSubset<T, AlamatFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alamat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlamatFindFirstArgs} args - Arguments to find a Alamat
     * @example
     * // Get one Alamat
     * const alamat = await prisma.alamat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlamatFindFirstArgs>(args?: SelectSubset<T, AlamatFindFirstArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Alamat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlamatFindFirstOrThrowArgs} args - Arguments to find a Alamat
     * @example
     * // Get one Alamat
     * const alamat = await prisma.alamat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlamatFindFirstOrThrowArgs>(args?: SelectSubset<T, AlamatFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Alamats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlamatFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Alamats
     * const alamats = await prisma.alamat.findMany()
     * 
     * // Get first 10 Alamats
     * const alamats = await prisma.alamat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const alamatWithIdOnly = await prisma.alamat.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlamatFindManyArgs>(args?: SelectSubset<T, AlamatFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Alamat.
     * @param {AlamatCreateArgs} args - Arguments to create a Alamat.
     * @example
     * // Create one Alamat
     * const Alamat = await prisma.alamat.create({
     *   data: {
     *     // ... data to create a Alamat
     *   }
     * })
     * 
     */
    create<T extends AlamatCreateArgs>(args: SelectSubset<T, AlamatCreateArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Alamats.
     * @param {AlamatCreateManyArgs} args - Arguments to create many Alamats.
     * @example
     * // Create many Alamats
     * const alamat = await prisma.alamat.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlamatCreateManyArgs>(args?: SelectSubset<T, AlamatCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Alamats and returns the data saved in the database.
     * @param {AlamatCreateManyAndReturnArgs} args - Arguments to create many Alamats.
     * @example
     * // Create many Alamats
     * const alamat = await prisma.alamat.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Alamats and only return the `id`
     * const alamatWithIdOnly = await prisma.alamat.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlamatCreateManyAndReturnArgs>(args?: SelectSubset<T, AlamatCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Alamat.
     * @param {AlamatDeleteArgs} args - Arguments to delete one Alamat.
     * @example
     * // Delete one Alamat
     * const Alamat = await prisma.alamat.delete({
     *   where: {
     *     // ... filter to delete one Alamat
     *   }
     * })
     * 
     */
    delete<T extends AlamatDeleteArgs>(args: SelectSubset<T, AlamatDeleteArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Alamat.
     * @param {AlamatUpdateArgs} args - Arguments to update one Alamat.
     * @example
     * // Update one Alamat
     * const alamat = await prisma.alamat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlamatUpdateArgs>(args: SelectSubset<T, AlamatUpdateArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Alamats.
     * @param {AlamatDeleteManyArgs} args - Arguments to filter Alamats to delete.
     * @example
     * // Delete a few Alamats
     * const { count } = await prisma.alamat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlamatDeleteManyArgs>(args?: SelectSubset<T, AlamatDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alamats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlamatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Alamats
     * const alamat = await prisma.alamat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlamatUpdateManyArgs>(args: SelectSubset<T, AlamatUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Alamats and returns the data updated in the database.
     * @param {AlamatUpdateManyAndReturnArgs} args - Arguments to update many Alamats.
     * @example
     * // Update many Alamats
     * const alamat = await prisma.alamat.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Alamats and only return the `id`
     * const alamatWithIdOnly = await prisma.alamat.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlamatUpdateManyAndReturnArgs>(args: SelectSubset<T, AlamatUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Alamat.
     * @param {AlamatUpsertArgs} args - Arguments to update or create a Alamat.
     * @example
     * // Update or create a Alamat
     * const alamat = await prisma.alamat.upsert({
     *   create: {
     *     // ... data to create a Alamat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Alamat we want to update
     *   }
     * })
     */
    upsert<T extends AlamatUpsertArgs>(args: SelectSubset<T, AlamatUpsertArgs<ExtArgs>>): Prisma__AlamatClient<$Result.GetResult<Prisma.$AlamatPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Alamats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlamatCountArgs} args - Arguments to filter Alamats to count.
     * @example
     * // Count the number of Alamats
     * const count = await prisma.alamat.count({
     *   where: {
     *     // ... the filter for the Alamats we want to count
     *   }
     * })
    **/
    count<T extends AlamatCountArgs>(
      args?: Subset<T, AlamatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlamatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Alamat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlamatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlamatAggregateArgs>(args: Subset<T, AlamatAggregateArgs>): Prisma.PrismaPromise<GetAlamatAggregateType<T>>

    /**
     * Group by Alamat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlamatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlamatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlamatGroupByArgs['orderBy'] }
        : { orderBy?: AlamatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlamatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlamatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Alamat model
   */
  readonly fields: AlamatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Alamat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlamatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    toko<T extends Alamat$tokoArgs<ExtArgs> = {}>(args?: Subset<T, Alamat$tokoArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Alamat model
   */
  interface AlamatFieldRefs {
    readonly id: FieldRef<"Alamat", 'Int'>
    readonly userId: FieldRef<"Alamat", 'Int'>
    readonly provinsi: FieldRef<"Alamat", 'String'>
    readonly kabupaten: FieldRef<"Alamat", 'String'>
    readonly kecamatan: FieldRef<"Alamat", 'String'>
    readonly desa: FieldRef<"Alamat", 'String'>
    readonly kode_pos: FieldRef<"Alamat", 'String'>
    readonly detail: FieldRef<"Alamat", 'String'>
    readonly catatan: FieldRef<"Alamat", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Alamat findUnique
   */
  export type AlamatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * Filter, which Alamat to fetch.
     */
    where: AlamatWhereUniqueInput
  }

  /**
   * Alamat findUniqueOrThrow
   */
  export type AlamatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * Filter, which Alamat to fetch.
     */
    where: AlamatWhereUniqueInput
  }

  /**
   * Alamat findFirst
   */
  export type AlamatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * Filter, which Alamat to fetch.
     */
    where?: AlamatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alamats to fetch.
     */
    orderBy?: AlamatOrderByWithRelationInput | AlamatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alamats.
     */
    cursor?: AlamatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alamats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alamats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alamats.
     */
    distinct?: AlamatScalarFieldEnum | AlamatScalarFieldEnum[]
  }

  /**
   * Alamat findFirstOrThrow
   */
  export type AlamatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * Filter, which Alamat to fetch.
     */
    where?: AlamatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alamats to fetch.
     */
    orderBy?: AlamatOrderByWithRelationInput | AlamatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Alamats.
     */
    cursor?: AlamatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alamats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alamats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Alamats.
     */
    distinct?: AlamatScalarFieldEnum | AlamatScalarFieldEnum[]
  }

  /**
   * Alamat findMany
   */
  export type AlamatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * Filter, which Alamats to fetch.
     */
    where?: AlamatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Alamats to fetch.
     */
    orderBy?: AlamatOrderByWithRelationInput | AlamatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Alamats.
     */
    cursor?: AlamatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Alamats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Alamats.
     */
    skip?: number
    distinct?: AlamatScalarFieldEnum | AlamatScalarFieldEnum[]
  }

  /**
   * Alamat create
   */
  export type AlamatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * The data needed to create a Alamat.
     */
    data: XOR<AlamatCreateInput, AlamatUncheckedCreateInput>
  }

  /**
   * Alamat createMany
   */
  export type AlamatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Alamats.
     */
    data: AlamatCreateManyInput | AlamatCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Alamat createManyAndReturn
   */
  export type AlamatCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * The data used to create many Alamats.
     */
    data: AlamatCreateManyInput | AlamatCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alamat update
   */
  export type AlamatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * The data needed to update a Alamat.
     */
    data: XOR<AlamatUpdateInput, AlamatUncheckedUpdateInput>
    /**
     * Choose, which Alamat to update.
     */
    where: AlamatWhereUniqueInput
  }

  /**
   * Alamat updateMany
   */
  export type AlamatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Alamats.
     */
    data: XOR<AlamatUpdateManyMutationInput, AlamatUncheckedUpdateManyInput>
    /**
     * Filter which Alamats to update
     */
    where?: AlamatWhereInput
    /**
     * Limit how many Alamats to update.
     */
    limit?: number
  }

  /**
   * Alamat updateManyAndReturn
   */
  export type AlamatUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * The data used to update Alamats.
     */
    data: XOR<AlamatUpdateManyMutationInput, AlamatUncheckedUpdateManyInput>
    /**
     * Filter which Alamats to update
     */
    where?: AlamatWhereInput
    /**
     * Limit how many Alamats to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Alamat upsert
   */
  export type AlamatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * The filter to search for the Alamat to update in case it exists.
     */
    where: AlamatWhereUniqueInput
    /**
     * In case the Alamat found by the `where` argument doesn't exist, create a new Alamat with this data.
     */
    create: XOR<AlamatCreateInput, AlamatUncheckedCreateInput>
    /**
     * In case the Alamat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlamatUpdateInput, AlamatUncheckedUpdateInput>
  }

  /**
   * Alamat delete
   */
  export type AlamatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
    /**
     * Filter which Alamat to delete.
     */
    where: AlamatWhereUniqueInput
  }

  /**
   * Alamat deleteMany
   */
  export type AlamatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Alamats to delete
     */
    where?: AlamatWhereInput
    /**
     * Limit how many Alamats to delete.
     */
    limit?: number
  }

  /**
   * Alamat.toko
   */
  export type Alamat$tokoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Users
     */
    select?: UsersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Users
     */
    omit?: UsersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UsersInclude<ExtArgs> | null
    where?: UsersWhereInput
    orderBy?: UsersOrderByWithRelationInput | UsersOrderByWithRelationInput[]
    cursor?: UsersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * Alamat without action
   */
  export type AlamatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Alamat
     */
    select?: AlamatSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Alamat
     */
    omit?: AlamatOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlamatInclude<ExtArgs> | null
  }


  /**
   * Model Pengajuan
   */

  export type AggregatePengajuan = {
    _count: PengajuanCountAggregateOutputType | null
    _avg: PengajuanAvgAggregateOutputType | null
    _sum: PengajuanSumAggregateOutputType | null
    _min: PengajuanMinAggregateOutputType | null
    _max: PengajuanMaxAggregateOutputType | null
  }

  export type PengajuanAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    status: number | null
    accBy: number | null
  }

  export type PengajuanSumAggregateOutputType = {
    id: number | null
    userId: number | null
    status: number | null
    accBy: number | null
  }

  export type PengajuanMinAggregateOutputType = {
    id: number | null
    userId: number | null
    time: Date | null
    status: number | null
    accBy: number | null
  }

  export type PengajuanMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    time: Date | null
    status: number | null
    accBy: number | null
  }

  export type PengajuanCountAggregateOutputType = {
    id: number
    userId: number
    time: number
    status: number
    accBy: number
    _all: number
  }


  export type PengajuanAvgAggregateInputType = {
    id?: true
    userId?: true
    status?: true
    accBy?: true
  }

  export type PengajuanSumAggregateInputType = {
    id?: true
    userId?: true
    status?: true
    accBy?: true
  }

  export type PengajuanMinAggregateInputType = {
    id?: true
    userId?: true
    time?: true
    status?: true
    accBy?: true
  }

  export type PengajuanMaxAggregateInputType = {
    id?: true
    userId?: true
    time?: true
    status?: true
    accBy?: true
  }

  export type PengajuanCountAggregateInputType = {
    id?: true
    userId?: true
    time?: true
    status?: true
    accBy?: true
    _all?: true
  }

  export type PengajuanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pengajuan to aggregate.
     */
    where?: PengajuanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pengajuans to fetch.
     */
    orderBy?: PengajuanOrderByWithRelationInput | PengajuanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PengajuanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pengajuans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pengajuans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pengajuans
    **/
    _count?: true | PengajuanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PengajuanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PengajuanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PengajuanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PengajuanMaxAggregateInputType
  }

  export type GetPengajuanAggregateType<T extends PengajuanAggregateArgs> = {
        [P in keyof T & keyof AggregatePengajuan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePengajuan[P]>
      : GetScalarType<T[P], AggregatePengajuan[P]>
  }




  export type PengajuanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PengajuanWhereInput
    orderBy?: PengajuanOrderByWithAggregationInput | PengajuanOrderByWithAggregationInput[]
    by: PengajuanScalarFieldEnum[] | PengajuanScalarFieldEnum
    having?: PengajuanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PengajuanCountAggregateInputType | true
    _avg?: PengajuanAvgAggregateInputType
    _sum?: PengajuanSumAggregateInputType
    _min?: PengajuanMinAggregateInputType
    _max?: PengajuanMaxAggregateInputType
  }

  export type PengajuanGroupByOutputType = {
    id: number
    userId: number
    time: Date
    status: number
    accBy: number
    _count: PengajuanCountAggregateOutputType | null
    _avg: PengajuanAvgAggregateOutputType | null
    _sum: PengajuanSumAggregateOutputType | null
    _min: PengajuanMinAggregateOutputType | null
    _max: PengajuanMaxAggregateOutputType | null
  }

  type GetPengajuanGroupByPayload<T extends PengajuanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PengajuanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PengajuanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PengajuanGroupByOutputType[P]>
            : GetScalarType<T[P], PengajuanGroupByOutputType[P]>
        }
      >
    >


  export type PengajuanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    time?: boolean
    status?: boolean
    accBy?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    AccBy?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pengajuan"]>

  export type PengajuanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    time?: boolean
    status?: boolean
    accBy?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    AccBy?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pengajuan"]>

  export type PengajuanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    time?: boolean
    status?: boolean
    accBy?: boolean
    users?: boolean | UsersDefaultArgs<ExtArgs>
    AccBy?: boolean | UsersDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pengajuan"]>

  export type PengajuanSelectScalar = {
    id?: boolean
    userId?: boolean
    time?: boolean
    status?: boolean
    accBy?: boolean
  }

  export type PengajuanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "time" | "status" | "accBy", ExtArgs["result"]["pengajuan"]>
  export type PengajuanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    AccBy?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type PengajuanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    AccBy?: boolean | UsersDefaultArgs<ExtArgs>
  }
  export type PengajuanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | UsersDefaultArgs<ExtArgs>
    AccBy?: boolean | UsersDefaultArgs<ExtArgs>
  }

  export type $PengajuanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pengajuan"
    objects: {
      users: Prisma.$UsersPayload<ExtArgs>
      AccBy: Prisma.$UsersPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      time: Date
      status: number
      accBy: number
    }, ExtArgs["result"]["pengajuan"]>
    composites: {}
  }

  type PengajuanGetPayload<S extends boolean | null | undefined | PengajuanDefaultArgs> = $Result.GetResult<Prisma.$PengajuanPayload, S>

  type PengajuanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PengajuanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PengajuanCountAggregateInputType | true
    }

  export interface PengajuanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pengajuan'], meta: { name: 'Pengajuan' } }
    /**
     * Find zero or one Pengajuan that matches the filter.
     * @param {PengajuanFindUniqueArgs} args - Arguments to find a Pengajuan
     * @example
     * // Get one Pengajuan
     * const pengajuan = await prisma.pengajuan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PengajuanFindUniqueArgs>(args: SelectSubset<T, PengajuanFindUniqueArgs<ExtArgs>>): Prisma__PengajuanClient<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pengajuan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PengajuanFindUniqueOrThrowArgs} args - Arguments to find a Pengajuan
     * @example
     * // Get one Pengajuan
     * const pengajuan = await prisma.pengajuan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PengajuanFindUniqueOrThrowArgs>(args: SelectSubset<T, PengajuanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PengajuanClient<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pengajuan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PengajuanFindFirstArgs} args - Arguments to find a Pengajuan
     * @example
     * // Get one Pengajuan
     * const pengajuan = await prisma.pengajuan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PengajuanFindFirstArgs>(args?: SelectSubset<T, PengajuanFindFirstArgs<ExtArgs>>): Prisma__PengajuanClient<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pengajuan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PengajuanFindFirstOrThrowArgs} args - Arguments to find a Pengajuan
     * @example
     * // Get one Pengajuan
     * const pengajuan = await prisma.pengajuan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PengajuanFindFirstOrThrowArgs>(args?: SelectSubset<T, PengajuanFindFirstOrThrowArgs<ExtArgs>>): Prisma__PengajuanClient<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pengajuans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PengajuanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pengajuans
     * const pengajuans = await prisma.pengajuan.findMany()
     * 
     * // Get first 10 Pengajuans
     * const pengajuans = await prisma.pengajuan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pengajuanWithIdOnly = await prisma.pengajuan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PengajuanFindManyArgs>(args?: SelectSubset<T, PengajuanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pengajuan.
     * @param {PengajuanCreateArgs} args - Arguments to create a Pengajuan.
     * @example
     * // Create one Pengajuan
     * const Pengajuan = await prisma.pengajuan.create({
     *   data: {
     *     // ... data to create a Pengajuan
     *   }
     * })
     * 
     */
    create<T extends PengajuanCreateArgs>(args: SelectSubset<T, PengajuanCreateArgs<ExtArgs>>): Prisma__PengajuanClient<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pengajuans.
     * @param {PengajuanCreateManyArgs} args - Arguments to create many Pengajuans.
     * @example
     * // Create many Pengajuans
     * const pengajuan = await prisma.pengajuan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PengajuanCreateManyArgs>(args?: SelectSubset<T, PengajuanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pengajuans and returns the data saved in the database.
     * @param {PengajuanCreateManyAndReturnArgs} args - Arguments to create many Pengajuans.
     * @example
     * // Create many Pengajuans
     * const pengajuan = await prisma.pengajuan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pengajuans and only return the `id`
     * const pengajuanWithIdOnly = await prisma.pengajuan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PengajuanCreateManyAndReturnArgs>(args?: SelectSubset<T, PengajuanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pengajuan.
     * @param {PengajuanDeleteArgs} args - Arguments to delete one Pengajuan.
     * @example
     * // Delete one Pengajuan
     * const Pengajuan = await prisma.pengajuan.delete({
     *   where: {
     *     // ... filter to delete one Pengajuan
     *   }
     * })
     * 
     */
    delete<T extends PengajuanDeleteArgs>(args: SelectSubset<T, PengajuanDeleteArgs<ExtArgs>>): Prisma__PengajuanClient<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pengajuan.
     * @param {PengajuanUpdateArgs} args - Arguments to update one Pengajuan.
     * @example
     * // Update one Pengajuan
     * const pengajuan = await prisma.pengajuan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PengajuanUpdateArgs>(args: SelectSubset<T, PengajuanUpdateArgs<ExtArgs>>): Prisma__PengajuanClient<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pengajuans.
     * @param {PengajuanDeleteManyArgs} args - Arguments to filter Pengajuans to delete.
     * @example
     * // Delete a few Pengajuans
     * const { count } = await prisma.pengajuan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PengajuanDeleteManyArgs>(args?: SelectSubset<T, PengajuanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pengajuans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PengajuanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pengajuans
     * const pengajuan = await prisma.pengajuan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PengajuanUpdateManyArgs>(args: SelectSubset<T, PengajuanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pengajuans and returns the data updated in the database.
     * @param {PengajuanUpdateManyAndReturnArgs} args - Arguments to update many Pengajuans.
     * @example
     * // Update many Pengajuans
     * const pengajuan = await prisma.pengajuan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pengajuans and only return the `id`
     * const pengajuanWithIdOnly = await prisma.pengajuan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PengajuanUpdateManyAndReturnArgs>(args: SelectSubset<T, PengajuanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pengajuan.
     * @param {PengajuanUpsertArgs} args - Arguments to update or create a Pengajuan.
     * @example
     * // Update or create a Pengajuan
     * const pengajuan = await prisma.pengajuan.upsert({
     *   create: {
     *     // ... data to create a Pengajuan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pengajuan we want to update
     *   }
     * })
     */
    upsert<T extends PengajuanUpsertArgs>(args: SelectSubset<T, PengajuanUpsertArgs<ExtArgs>>): Prisma__PengajuanClient<$Result.GetResult<Prisma.$PengajuanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pengajuans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PengajuanCountArgs} args - Arguments to filter Pengajuans to count.
     * @example
     * // Count the number of Pengajuans
     * const count = await prisma.pengajuan.count({
     *   where: {
     *     // ... the filter for the Pengajuans we want to count
     *   }
     * })
    **/
    count<T extends PengajuanCountArgs>(
      args?: Subset<T, PengajuanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PengajuanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pengajuan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PengajuanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PengajuanAggregateArgs>(args: Subset<T, PengajuanAggregateArgs>): Prisma.PrismaPromise<GetPengajuanAggregateType<T>>

    /**
     * Group by Pengajuan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PengajuanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PengajuanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PengajuanGroupByArgs['orderBy'] }
        : { orderBy?: PengajuanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PengajuanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPengajuanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pengajuan model
   */
  readonly fields: PengajuanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pengajuan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PengajuanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    AccBy<T extends UsersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UsersDefaultArgs<ExtArgs>>): Prisma__UsersClient<$Result.GetResult<Prisma.$UsersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pengajuan model
   */
  interface PengajuanFieldRefs {
    readonly id: FieldRef<"Pengajuan", 'Int'>
    readonly userId: FieldRef<"Pengajuan", 'Int'>
    readonly time: FieldRef<"Pengajuan", 'DateTime'>
    readonly status: FieldRef<"Pengajuan", 'Int'>
    readonly accBy: FieldRef<"Pengajuan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Pengajuan findUnique
   */
  export type PengajuanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * Filter, which Pengajuan to fetch.
     */
    where: PengajuanWhereUniqueInput
  }

  /**
   * Pengajuan findUniqueOrThrow
   */
  export type PengajuanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * Filter, which Pengajuan to fetch.
     */
    where: PengajuanWhereUniqueInput
  }

  /**
   * Pengajuan findFirst
   */
  export type PengajuanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * Filter, which Pengajuan to fetch.
     */
    where?: PengajuanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pengajuans to fetch.
     */
    orderBy?: PengajuanOrderByWithRelationInput | PengajuanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pengajuans.
     */
    cursor?: PengajuanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pengajuans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pengajuans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pengajuans.
     */
    distinct?: PengajuanScalarFieldEnum | PengajuanScalarFieldEnum[]
  }

  /**
   * Pengajuan findFirstOrThrow
   */
  export type PengajuanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * Filter, which Pengajuan to fetch.
     */
    where?: PengajuanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pengajuans to fetch.
     */
    orderBy?: PengajuanOrderByWithRelationInput | PengajuanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pengajuans.
     */
    cursor?: PengajuanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pengajuans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pengajuans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pengajuans.
     */
    distinct?: PengajuanScalarFieldEnum | PengajuanScalarFieldEnum[]
  }

  /**
   * Pengajuan findMany
   */
  export type PengajuanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * Filter, which Pengajuans to fetch.
     */
    where?: PengajuanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pengajuans to fetch.
     */
    orderBy?: PengajuanOrderByWithRelationInput | PengajuanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pengajuans.
     */
    cursor?: PengajuanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pengajuans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pengajuans.
     */
    skip?: number
    distinct?: PengajuanScalarFieldEnum | PengajuanScalarFieldEnum[]
  }

  /**
   * Pengajuan create
   */
  export type PengajuanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * The data needed to create a Pengajuan.
     */
    data: XOR<PengajuanCreateInput, PengajuanUncheckedCreateInput>
  }

  /**
   * Pengajuan createMany
   */
  export type PengajuanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pengajuans.
     */
    data: PengajuanCreateManyInput | PengajuanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pengajuan createManyAndReturn
   */
  export type PengajuanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * The data used to create many Pengajuans.
     */
    data: PengajuanCreateManyInput | PengajuanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pengajuan update
   */
  export type PengajuanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * The data needed to update a Pengajuan.
     */
    data: XOR<PengajuanUpdateInput, PengajuanUncheckedUpdateInput>
    /**
     * Choose, which Pengajuan to update.
     */
    where: PengajuanWhereUniqueInput
  }

  /**
   * Pengajuan updateMany
   */
  export type PengajuanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pengajuans.
     */
    data: XOR<PengajuanUpdateManyMutationInput, PengajuanUncheckedUpdateManyInput>
    /**
     * Filter which Pengajuans to update
     */
    where?: PengajuanWhereInput
    /**
     * Limit how many Pengajuans to update.
     */
    limit?: number
  }

  /**
   * Pengajuan updateManyAndReturn
   */
  export type PengajuanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * The data used to update Pengajuans.
     */
    data: XOR<PengajuanUpdateManyMutationInput, PengajuanUncheckedUpdateManyInput>
    /**
     * Filter which Pengajuans to update
     */
    where?: PengajuanWhereInput
    /**
     * Limit how many Pengajuans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pengajuan upsert
   */
  export type PengajuanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * The filter to search for the Pengajuan to update in case it exists.
     */
    where: PengajuanWhereUniqueInput
    /**
     * In case the Pengajuan found by the `where` argument doesn't exist, create a new Pengajuan with this data.
     */
    create: XOR<PengajuanCreateInput, PengajuanUncheckedCreateInput>
    /**
     * In case the Pengajuan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PengajuanUpdateInput, PengajuanUncheckedUpdateInput>
  }

  /**
   * Pengajuan delete
   */
  export type PengajuanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
    /**
     * Filter which Pengajuan to delete.
     */
    where: PengajuanWhereUniqueInput
  }

  /**
   * Pengajuan deleteMany
   */
  export type PengajuanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pengajuans to delete
     */
    where?: PengajuanWhereInput
    /**
     * Limit how many Pengajuans to delete.
     */
    limit?: number
  }

  /**
   * Pengajuan without action
   */
  export type PengajuanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pengajuan
     */
    select?: PengajuanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pengajuan
     */
    omit?: PengajuanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PengajuanInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    gender: 'gender',
    role: 'role',
    telp: 'telp',
    buka_toko: 'buka_toko',
    nama_toko: 'nama_toko',
    klasifikasi_toko: 'klasifikasi_toko',
    rating_toko: 'rating_toko',
    alamat_toko: 'alamat_toko'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    nama: 'nama',
    stock: 'stock',
    harga: 'harga',
    desc: 'desc',
    path: 'path'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const TransaksiScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    status: 'status'
  };

  export type TransaksiScalarFieldEnum = (typeof TransaksiScalarFieldEnum)[keyof typeof TransaksiScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    review: 'review',
    rating: 'rating'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const LikesScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    productId: 'productId',
    time: 'time'
  };

  export type LikesScalarFieldEnum = (typeof LikesScalarFieldEnum)[keyof typeof LikesScalarFieldEnum]


  export const AlamatScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    provinsi: 'provinsi',
    kabupaten: 'kabupaten',
    kecamatan: 'kecamatan',
    desa: 'desa',
    kode_pos: 'kode_pos',
    detail: 'detail',
    catatan: 'catatan'
  };

  export type AlamatScalarFieldEnum = (typeof AlamatScalarFieldEnum)[keyof typeof AlamatScalarFieldEnum]


  export const PengajuanScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    time: 'time',
    status: 'status',
    accBy: 'accBy'
  };

  export type PengajuanScalarFieldEnum = (typeof PengajuanScalarFieldEnum)[keyof typeof PengajuanScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type UsersWhereInput = {
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    id?: IntFilter<"Users"> | number
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    firstName?: StringFilter<"Users"> | string
    lastName?: StringFilter<"Users"> | string
    gender?: IntFilter<"Users"> | number
    role?: IntFilter<"Users"> | number
    telp?: StringFilter<"Users"> | string
    buka_toko?: IntFilter<"Users"> | number
    nama_toko?: StringFilter<"Users"> | string
    klasifikasi_toko?: IntFilter<"Users"> | number
    rating_toko?: FloatFilter<"Users"> | number
    alamat_toko?: IntNullableFilter<"Users"> | number | null
    almt_tk?: XOR<AlamatNullableScalarRelationFilter, AlamatWhereInput> | null
    alamat?: AlamatListRelationFilter
    product?: ProductListRelationFilter
    transaksi?: TransaksiListRelationFilter
    review?: ReviewListRelationFilter
    likes?: LikesListRelationFilter
    pengajuan?: PengajuanListRelationFilter
    accBy?: PengajuanListRelationFilter
  }

  export type UsersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    telp?: SortOrder
    buka_toko?: SortOrder
    nama_toko?: SortOrder
    klasifikasi_toko?: SortOrder
    rating_toko?: SortOrder
    alamat_toko?: SortOrderInput | SortOrder
    almt_tk?: AlamatOrderByWithRelationInput
    alamat?: AlamatOrderByRelationAggregateInput
    product?: ProductOrderByRelationAggregateInput
    transaksi?: TransaksiOrderByRelationAggregateInput
    review?: ReviewOrderByRelationAggregateInput
    likes?: LikesOrderByRelationAggregateInput
    pengajuan?: PengajuanOrderByRelationAggregateInput
    accBy?: PengajuanOrderByRelationAggregateInput
  }

  export type UsersWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UsersWhereInput | UsersWhereInput[]
    OR?: UsersWhereInput[]
    NOT?: UsersWhereInput | UsersWhereInput[]
    password?: StringFilter<"Users"> | string
    firstName?: StringFilter<"Users"> | string
    lastName?: StringFilter<"Users"> | string
    gender?: IntFilter<"Users"> | number
    role?: IntFilter<"Users"> | number
    telp?: StringFilter<"Users"> | string
    buka_toko?: IntFilter<"Users"> | number
    nama_toko?: StringFilter<"Users"> | string
    klasifikasi_toko?: IntFilter<"Users"> | number
    rating_toko?: FloatFilter<"Users"> | number
    alamat_toko?: IntNullableFilter<"Users"> | number | null
    almt_tk?: XOR<AlamatNullableScalarRelationFilter, AlamatWhereInput> | null
    alamat?: AlamatListRelationFilter
    product?: ProductListRelationFilter
    transaksi?: TransaksiListRelationFilter
    review?: ReviewListRelationFilter
    likes?: LikesListRelationFilter
    pengajuan?: PengajuanListRelationFilter
    accBy?: PengajuanListRelationFilter
  }, "id" | "email">

  export type UsersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    telp?: SortOrder
    buka_toko?: SortOrder
    nama_toko?: SortOrder
    klasifikasi_toko?: SortOrder
    rating_toko?: SortOrder
    alamat_toko?: SortOrderInput | SortOrder
    _count?: UsersCountOrderByAggregateInput
    _avg?: UsersAvgOrderByAggregateInput
    _max?: UsersMaxOrderByAggregateInput
    _min?: UsersMinOrderByAggregateInput
    _sum?: UsersSumOrderByAggregateInput
  }

  export type UsersScalarWhereWithAggregatesInput = {
    AND?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    OR?: UsersScalarWhereWithAggregatesInput[]
    NOT?: UsersScalarWhereWithAggregatesInput | UsersScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Users"> | number
    email?: StringWithAggregatesFilter<"Users"> | string
    password?: StringWithAggregatesFilter<"Users"> | string
    firstName?: StringWithAggregatesFilter<"Users"> | string
    lastName?: StringWithAggregatesFilter<"Users"> | string
    gender?: IntWithAggregatesFilter<"Users"> | number
    role?: IntWithAggregatesFilter<"Users"> | number
    telp?: StringWithAggregatesFilter<"Users"> | string
    buka_toko?: IntWithAggregatesFilter<"Users"> | number
    nama_toko?: StringWithAggregatesFilter<"Users"> | string
    klasifikasi_toko?: IntWithAggregatesFilter<"Users"> | number
    rating_toko?: FloatWithAggregatesFilter<"Users"> | number
    alamat_toko?: IntNullableWithAggregatesFilter<"Users"> | number | null
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    userId?: IntFilter<"Product"> | number
    nama?: StringFilter<"Product"> | string
    stock?: IntFilter<"Product"> | number
    harga?: IntFilter<"Product"> | number
    desc?: StringFilter<"Product"> | string
    path?: StringFilter<"Product"> | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    transaksi?: TransaksiListRelationFilter
    review?: ReviewListRelationFilter
    likes?: LikesListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    stock?: SortOrder
    harga?: SortOrder
    desc?: SortOrder
    path?: SortOrder
    user?: UsersOrderByWithRelationInput
    transaksi?: TransaksiOrderByRelationAggregateInput
    review?: ReviewOrderByRelationAggregateInput
    likes?: LikesOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    userId?: IntFilter<"Product"> | number
    nama?: StringFilter<"Product"> | string
    stock?: IntFilter<"Product"> | number
    harga?: IntFilter<"Product"> | number
    desc?: StringFilter<"Product"> | string
    path?: StringFilter<"Product"> | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    transaksi?: TransaksiListRelationFilter
    review?: ReviewListRelationFilter
    likes?: LikesListRelationFilter
  }, "id">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    stock?: SortOrder
    harga?: SortOrder
    desc?: SortOrder
    path?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    userId?: IntWithAggregatesFilter<"Product"> | number
    nama?: StringWithAggregatesFilter<"Product"> | string
    stock?: IntWithAggregatesFilter<"Product"> | number
    harga?: IntWithAggregatesFilter<"Product"> | number
    desc?: StringWithAggregatesFilter<"Product"> | string
    path?: StringWithAggregatesFilter<"Product"> | string
  }

  export type TransaksiWhereInput = {
    AND?: TransaksiWhereInput | TransaksiWhereInput[]
    OR?: TransaksiWhereInput[]
    NOT?: TransaksiWhereInput | TransaksiWhereInput[]
    id?: IntFilter<"Transaksi"> | number
    userId?: IntFilter<"Transaksi"> | number
    productId?: IntFilter<"Transaksi"> | number
    status?: IntFilter<"Transaksi"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type TransaksiOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    status?: SortOrder
    user?: UsersOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type TransaksiWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransaksiWhereInput | TransaksiWhereInput[]
    OR?: TransaksiWhereInput[]
    NOT?: TransaksiWhereInput | TransaksiWhereInput[]
    userId?: IntFilter<"Transaksi"> | number
    productId?: IntFilter<"Transaksi"> | number
    status?: IntFilter<"Transaksi"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type TransaksiOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    status?: SortOrder
    _count?: TransaksiCountOrderByAggregateInput
    _avg?: TransaksiAvgOrderByAggregateInput
    _max?: TransaksiMaxOrderByAggregateInput
    _min?: TransaksiMinOrderByAggregateInput
    _sum?: TransaksiSumOrderByAggregateInput
  }

  export type TransaksiScalarWhereWithAggregatesInput = {
    AND?: TransaksiScalarWhereWithAggregatesInput | TransaksiScalarWhereWithAggregatesInput[]
    OR?: TransaksiScalarWhereWithAggregatesInput[]
    NOT?: TransaksiScalarWhereWithAggregatesInput | TransaksiScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transaksi"> | number
    userId?: IntWithAggregatesFilter<"Transaksi"> | number
    productId?: IntWithAggregatesFilter<"Transaksi"> | number
    status?: IntWithAggregatesFilter<"Transaksi"> | number
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    id?: IntFilter<"Review"> | number
    userId?: IntFilter<"Review"> | number
    productId?: IntFilter<"Review"> | number
    review?: StringFilter<"Review"> | string
    rating?: FloatFilter<"Review"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    review?: SortOrder
    rating?: SortOrder
    user?: UsersOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    userId?: IntFilter<"Review"> | number
    productId?: IntFilter<"Review"> | number
    review?: StringFilter<"Review"> | string
    rating?: FloatFilter<"Review"> | number
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type ReviewOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    review?: SortOrder
    rating?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Review"> | number
    userId?: IntWithAggregatesFilter<"Review"> | number
    productId?: IntWithAggregatesFilter<"Review"> | number
    review?: StringWithAggregatesFilter<"Review"> | string
    rating?: FloatWithAggregatesFilter<"Review"> | number
  }

  export type LikesWhereInput = {
    AND?: LikesWhereInput | LikesWhereInput[]
    OR?: LikesWhereInput[]
    NOT?: LikesWhereInput | LikesWhereInput[]
    id?: IntFilter<"Likes"> | number
    userId?: IntFilter<"Likes"> | number
    productId?: IntFilter<"Likes"> | number
    time?: DateTimeFilter<"Likes"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }

  export type LikesOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    time?: SortOrder
    user?: UsersOrderByWithRelationInput
    product?: ProductOrderByWithRelationInput
  }

  export type LikesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: LikesWhereInput | LikesWhereInput[]
    OR?: LikesWhereInput[]
    NOT?: LikesWhereInput | LikesWhereInput[]
    userId?: IntFilter<"Likes"> | number
    productId?: IntFilter<"Likes"> | number
    time?: DateTimeFilter<"Likes"> | Date | string
    user?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    product?: XOR<ProductScalarRelationFilter, ProductWhereInput>
  }, "id">

  export type LikesOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    time?: SortOrder
    _count?: LikesCountOrderByAggregateInput
    _avg?: LikesAvgOrderByAggregateInput
    _max?: LikesMaxOrderByAggregateInput
    _min?: LikesMinOrderByAggregateInput
    _sum?: LikesSumOrderByAggregateInput
  }

  export type LikesScalarWhereWithAggregatesInput = {
    AND?: LikesScalarWhereWithAggregatesInput | LikesScalarWhereWithAggregatesInput[]
    OR?: LikesScalarWhereWithAggregatesInput[]
    NOT?: LikesScalarWhereWithAggregatesInput | LikesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Likes"> | number
    userId?: IntWithAggregatesFilter<"Likes"> | number
    productId?: IntWithAggregatesFilter<"Likes"> | number
    time?: DateTimeWithAggregatesFilter<"Likes"> | Date | string
  }

  export type AlamatWhereInput = {
    AND?: AlamatWhereInput | AlamatWhereInput[]
    OR?: AlamatWhereInput[]
    NOT?: AlamatWhereInput | AlamatWhereInput[]
    id?: IntFilter<"Alamat"> | number
    userId?: IntFilter<"Alamat"> | number
    provinsi?: StringFilter<"Alamat"> | string
    kabupaten?: StringFilter<"Alamat"> | string
    kecamatan?: StringFilter<"Alamat"> | string
    desa?: StringFilter<"Alamat"> | string
    kode_pos?: StringFilter<"Alamat"> | string
    detail?: StringFilter<"Alamat"> | string
    catatan?: StringFilter<"Alamat"> | string
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    toko?: UsersListRelationFilter
  }

  export type AlamatOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    provinsi?: SortOrder
    kabupaten?: SortOrder
    kecamatan?: SortOrder
    desa?: SortOrder
    kode_pos?: SortOrder
    detail?: SortOrder
    catatan?: SortOrder
    users?: UsersOrderByWithRelationInput
    toko?: UsersOrderByRelationAggregateInput
  }

  export type AlamatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AlamatWhereInput | AlamatWhereInput[]
    OR?: AlamatWhereInput[]
    NOT?: AlamatWhereInput | AlamatWhereInput[]
    userId?: IntFilter<"Alamat"> | number
    provinsi?: StringFilter<"Alamat"> | string
    kabupaten?: StringFilter<"Alamat"> | string
    kecamatan?: StringFilter<"Alamat"> | string
    desa?: StringFilter<"Alamat"> | string
    kode_pos?: StringFilter<"Alamat"> | string
    detail?: StringFilter<"Alamat"> | string
    catatan?: StringFilter<"Alamat"> | string
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    toko?: UsersListRelationFilter
  }, "id">

  export type AlamatOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    provinsi?: SortOrder
    kabupaten?: SortOrder
    kecamatan?: SortOrder
    desa?: SortOrder
    kode_pos?: SortOrder
    detail?: SortOrder
    catatan?: SortOrder
    _count?: AlamatCountOrderByAggregateInput
    _avg?: AlamatAvgOrderByAggregateInput
    _max?: AlamatMaxOrderByAggregateInput
    _min?: AlamatMinOrderByAggregateInput
    _sum?: AlamatSumOrderByAggregateInput
  }

  export type AlamatScalarWhereWithAggregatesInput = {
    AND?: AlamatScalarWhereWithAggregatesInput | AlamatScalarWhereWithAggregatesInput[]
    OR?: AlamatScalarWhereWithAggregatesInput[]
    NOT?: AlamatScalarWhereWithAggregatesInput | AlamatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Alamat"> | number
    userId?: IntWithAggregatesFilter<"Alamat"> | number
    provinsi?: StringWithAggregatesFilter<"Alamat"> | string
    kabupaten?: StringWithAggregatesFilter<"Alamat"> | string
    kecamatan?: StringWithAggregatesFilter<"Alamat"> | string
    desa?: StringWithAggregatesFilter<"Alamat"> | string
    kode_pos?: StringWithAggregatesFilter<"Alamat"> | string
    detail?: StringWithAggregatesFilter<"Alamat"> | string
    catatan?: StringWithAggregatesFilter<"Alamat"> | string
  }

  export type PengajuanWhereInput = {
    AND?: PengajuanWhereInput | PengajuanWhereInput[]
    OR?: PengajuanWhereInput[]
    NOT?: PengajuanWhereInput | PengajuanWhereInput[]
    id?: IntFilter<"Pengajuan"> | number
    userId?: IntFilter<"Pengajuan"> | number
    time?: DateTimeFilter<"Pengajuan"> | Date | string
    status?: IntFilter<"Pengajuan"> | number
    accBy?: IntFilter<"Pengajuan"> | number
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    AccBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }

  export type PengajuanOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    time?: SortOrder
    status?: SortOrder
    accBy?: SortOrder
    users?: UsersOrderByWithRelationInput
    AccBy?: UsersOrderByWithRelationInput
  }

  export type PengajuanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PengajuanWhereInput | PengajuanWhereInput[]
    OR?: PengajuanWhereInput[]
    NOT?: PengajuanWhereInput | PengajuanWhereInput[]
    userId?: IntFilter<"Pengajuan"> | number
    time?: DateTimeFilter<"Pengajuan"> | Date | string
    status?: IntFilter<"Pengajuan"> | number
    accBy?: IntFilter<"Pengajuan"> | number
    users?: XOR<UsersScalarRelationFilter, UsersWhereInput>
    AccBy?: XOR<UsersScalarRelationFilter, UsersWhereInput>
  }, "id">

  export type PengajuanOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    time?: SortOrder
    status?: SortOrder
    accBy?: SortOrder
    _count?: PengajuanCountOrderByAggregateInput
    _avg?: PengajuanAvgOrderByAggregateInput
    _max?: PengajuanMaxOrderByAggregateInput
    _min?: PengajuanMinOrderByAggregateInput
    _sum?: PengajuanSumOrderByAggregateInput
  }

  export type PengajuanScalarWhereWithAggregatesInput = {
    AND?: PengajuanScalarWhereWithAggregatesInput | PengajuanScalarWhereWithAggregatesInput[]
    OR?: PengajuanScalarWhereWithAggregatesInput[]
    NOT?: PengajuanScalarWhereWithAggregatesInput | PengajuanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pengajuan"> | number
    userId?: IntWithAggregatesFilter<"Pengajuan"> | number
    time?: DateTimeWithAggregatesFilter<"Pengajuan"> | Date | string
    status?: IntWithAggregatesFilter<"Pengajuan"> | number
    accBy?: IntWithAggregatesFilter<"Pengajuan"> | number
  }

  export type UsersCreateInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    almt_tk?: AlamatCreateNestedOneWithoutTokoInput
    alamat?: AlamatCreateNestedManyWithoutUsersInput
    product?: ProductCreateNestedManyWithoutUserInput
    transaksi?: TransaksiCreateNestedManyWithoutUserInput
    review?: ReviewCreateNestedManyWithoutUserInput
    likes?: LikesCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanCreateNestedManyWithoutUsersInput
    accBy?: PengajuanCreateNestedManyWithoutAccByInput
  }

  export type UsersUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
    alamat?: AlamatUncheckedCreateNestedManyWithoutUsersInput
    product?: ProductUncheckedCreateNestedManyWithoutUserInput
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutUserInput
    review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanUncheckedCreateNestedManyWithoutUsersInput
    accBy?: PengajuanUncheckedCreateNestedManyWithoutAccByInput
  }

  export type UsersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    almt_tk?: AlamatUpdateOneWithoutTokoNestedInput
    alamat?: AlamatUpdateManyWithoutUsersNestedInput
    product?: ProductUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUpdateManyWithoutUserNestedInput
    review?: ReviewUpdateManyWithoutUserNestedInput
    likes?: LikesUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
    alamat?: AlamatUncheckedUpdateManyWithoutUsersNestedInput
    product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUncheckedUpdateManyWithoutUserNestedInput
    review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUncheckedUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUncheckedUpdateManyWithoutAccByNestedInput
  }

  export type UsersCreateManyInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
  }

  export type UsersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
  }

  export type UsersUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProductCreateInput = {
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    user: UsersCreateNestedOneWithoutProductInput
    transaksi?: TransaksiCreateNestedManyWithoutProductInput
    review?: ReviewCreateNestedManyWithoutProductInput
    likes?: LikesCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    userId: number
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutProductInput
    review?: ReviewUncheckedCreateNestedManyWithoutProductInput
    likes?: LikesUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutProductNestedInput
    transaksi?: TransaksiUpdateManyWithoutProductNestedInput
    review?: ReviewUpdateManyWithoutProductNestedInput
    likes?: LikesUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    transaksi?: TransaksiUncheckedUpdateManyWithoutProductNestedInput
    review?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    likes?: LikesUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    userId: number
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
  }

  export type ProductUpdateManyMutationInput = {
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type TransaksiCreateInput = {
    status: number
    user: UsersCreateNestedOneWithoutTransaksiInput
    product: ProductCreateNestedOneWithoutTransaksiInput
  }

  export type TransaksiUncheckedCreateInput = {
    id?: number
    userId: number
    productId: number
    status: number
  }

  export type TransaksiUpdateInput = {
    status?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutTransaksiNestedInput
    product?: ProductUpdateOneRequiredWithoutTransaksiNestedInput
  }

  export type TransaksiUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiCreateManyInput = {
    id?: number
    userId: number
    productId: number
    status: number
  }

  export type TransaksiUpdateManyMutationInput = {
    status?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateInput = {
    review: string
    rating: number
    user: UsersCreateNestedOneWithoutReviewInput
    product: ProductCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateInput = {
    id?: number
    userId: number
    productId: number
    review: string
    rating: number
  }

  export type ReviewUpdateInput = {
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutReviewNestedInput
    product?: ProductUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewCreateManyInput = {
    id?: number
    userId: number
    productId: number
    review: string
    rating: number
  }

  export type ReviewUpdateManyMutationInput = {
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type LikesCreateInput = {
    time: Date | string
    user: UsersCreateNestedOneWithoutLikesInput
    product: ProductCreateNestedOneWithoutLikesInput
  }

  export type LikesUncheckedCreateInput = {
    id?: number
    userId: number
    productId: number
    time: Date | string
  }

  export type LikesUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutLikesNestedInput
    product?: ProductUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikesCreateManyInput = {
    id?: number
    userId: number
    productId: number
    time: Date | string
  }

  export type LikesUpdateManyMutationInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AlamatCreateInput = {
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail?: string
    catatan?: string
    users: UsersCreateNestedOneWithoutAlamatInput
    toko?: UsersCreateNestedManyWithoutAlmt_tkInput
  }

  export type AlamatUncheckedCreateInput = {
    id?: number
    userId: number
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail?: string
    catatan?: string
    toko?: UsersUncheckedCreateNestedManyWithoutAlmt_tkInput
  }

  export type AlamatUpdateInput = {
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutAlamatNestedInput
    toko?: UsersUpdateManyWithoutAlmt_tkNestedInput
  }

  export type AlamatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    toko?: UsersUncheckedUpdateManyWithoutAlmt_tkNestedInput
  }

  export type AlamatCreateManyInput = {
    id?: number
    userId: number
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail?: string
    catatan?: string
  }

  export type AlamatUpdateManyMutationInput = {
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
  }

  export type AlamatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
  }

  export type PengajuanCreateInput = {
    time: Date | string
    status: number
    users: UsersCreateNestedOneWithoutPengajuanInput
    AccBy: UsersCreateNestedOneWithoutAccByInput
  }

  export type PengajuanUncheckedCreateInput = {
    id?: number
    userId: number
    time: Date | string
    status: number
    accBy: number
  }

  export type PengajuanUpdateInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
    users?: UsersUpdateOneRequiredWithoutPengajuanNestedInput
    AccBy?: UsersUpdateOneRequiredWithoutAccByNestedInput
  }

  export type PengajuanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
    accBy?: IntFieldUpdateOperationsInput | number
  }

  export type PengajuanCreateManyInput = {
    id?: number
    userId: number
    time: Date | string
    status: number
    accBy: number
  }

  export type PengajuanUpdateManyMutationInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type PengajuanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
    accBy?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AlamatNullableScalarRelationFilter = {
    is?: AlamatWhereInput | null
    isNot?: AlamatWhereInput | null
  }

  export type AlamatListRelationFilter = {
    every?: AlamatWhereInput
    some?: AlamatWhereInput
    none?: AlamatWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type TransaksiListRelationFilter = {
    every?: TransaksiWhereInput
    some?: TransaksiWhereInput
    none?: TransaksiWhereInput
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type LikesListRelationFilter = {
    every?: LikesWhereInput
    some?: LikesWhereInput
    none?: LikesWhereInput
  }

  export type PengajuanListRelationFilter = {
    every?: PengajuanWhereInput
    some?: PengajuanWhereInput
    none?: PengajuanWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AlamatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransaksiOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PengajuanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UsersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    telp?: SortOrder
    buka_toko?: SortOrder
    nama_toko?: SortOrder
    klasifikasi_toko?: SortOrder
    rating_toko?: SortOrder
    alamat_toko?: SortOrder
  }

  export type UsersAvgOrderByAggregateInput = {
    id?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    buka_toko?: SortOrder
    klasifikasi_toko?: SortOrder
    rating_toko?: SortOrder
    alamat_toko?: SortOrder
  }

  export type UsersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    telp?: SortOrder
    buka_toko?: SortOrder
    nama_toko?: SortOrder
    klasifikasi_toko?: SortOrder
    rating_toko?: SortOrder
    alamat_toko?: SortOrder
  }

  export type UsersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    telp?: SortOrder
    buka_toko?: SortOrder
    nama_toko?: SortOrder
    klasifikasi_toko?: SortOrder
    rating_toko?: SortOrder
    alamat_toko?: SortOrder
  }

  export type UsersSumOrderByAggregateInput = {
    id?: SortOrder
    gender?: SortOrder
    role?: SortOrder
    buka_toko?: SortOrder
    klasifikasi_toko?: SortOrder
    rating_toko?: SortOrder
    alamat_toko?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type UsersScalarRelationFilter = {
    is?: UsersWhereInput
    isNot?: UsersWhereInput
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    stock?: SortOrder
    harga?: SortOrder
    desc?: SortOrder
    path?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stock?: SortOrder
    harga?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    stock?: SortOrder
    harga?: SortOrder
    desc?: SortOrder
    path?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    nama?: SortOrder
    stock?: SortOrder
    harga?: SortOrder
    desc?: SortOrder
    path?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    stock?: SortOrder
    harga?: SortOrder
  }

  export type ProductScalarRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type TransaksiCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    status?: SortOrder
  }

  export type TransaksiAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    status?: SortOrder
  }

  export type TransaksiMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    status?: SortOrder
  }

  export type TransaksiMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    status?: SortOrder
  }

  export type TransaksiSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    status?: SortOrder
  }

  export type ReviewCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    review?: SortOrder
    rating?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    review?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    review?: SortOrder
    rating?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    rating?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type LikesCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    time?: SortOrder
  }

  export type LikesAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type LikesMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    time?: SortOrder
  }

  export type LikesMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
    time?: SortOrder
  }

  export type LikesSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    productId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UsersListRelationFilter = {
    every?: UsersWhereInput
    some?: UsersWhereInput
    none?: UsersWhereInput
  }

  export type UsersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlamatCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provinsi?: SortOrder
    kabupaten?: SortOrder
    kecamatan?: SortOrder
    desa?: SortOrder
    kode_pos?: SortOrder
    detail?: SortOrder
    catatan?: SortOrder
  }

  export type AlamatAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AlamatMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provinsi?: SortOrder
    kabupaten?: SortOrder
    kecamatan?: SortOrder
    desa?: SortOrder
    kode_pos?: SortOrder
    detail?: SortOrder
    catatan?: SortOrder
  }

  export type AlamatMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    provinsi?: SortOrder
    kabupaten?: SortOrder
    kecamatan?: SortOrder
    desa?: SortOrder
    kode_pos?: SortOrder
    detail?: SortOrder
    catatan?: SortOrder
  }

  export type AlamatSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PengajuanCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    time?: SortOrder
    status?: SortOrder
    accBy?: SortOrder
  }

  export type PengajuanAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    accBy?: SortOrder
  }

  export type PengajuanMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    time?: SortOrder
    status?: SortOrder
    accBy?: SortOrder
  }

  export type PengajuanMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    time?: SortOrder
    status?: SortOrder
    accBy?: SortOrder
  }

  export type PengajuanSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    accBy?: SortOrder
  }

  export type AlamatCreateNestedOneWithoutTokoInput = {
    create?: XOR<AlamatCreateWithoutTokoInput, AlamatUncheckedCreateWithoutTokoInput>
    connectOrCreate?: AlamatCreateOrConnectWithoutTokoInput
    connect?: AlamatWhereUniqueInput
  }

  export type AlamatCreateNestedManyWithoutUsersInput = {
    create?: XOR<AlamatCreateWithoutUsersInput, AlamatUncheckedCreateWithoutUsersInput> | AlamatCreateWithoutUsersInput[] | AlamatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AlamatCreateOrConnectWithoutUsersInput | AlamatCreateOrConnectWithoutUsersInput[]
    createMany?: AlamatCreateManyUsersInputEnvelope
    connect?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type TransaksiCreateNestedManyWithoutUserInput = {
    create?: XOR<TransaksiCreateWithoutUserInput, TransaksiUncheckedCreateWithoutUserInput> | TransaksiCreateWithoutUserInput[] | TransaksiUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutUserInput | TransaksiCreateOrConnectWithoutUserInput[]
    createMany?: TransaksiCreateManyUserInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type LikesCreateNestedManyWithoutUserInput = {
    create?: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput> | LikesCreateWithoutUserInput[] | LikesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutUserInput | LikesCreateOrConnectWithoutUserInput[]
    createMany?: LikesCreateManyUserInputEnvelope
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
  }

  export type PengajuanCreateNestedManyWithoutUsersInput = {
    create?: XOR<PengajuanCreateWithoutUsersInput, PengajuanUncheckedCreateWithoutUsersInput> | PengajuanCreateWithoutUsersInput[] | PengajuanUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PengajuanCreateOrConnectWithoutUsersInput | PengajuanCreateOrConnectWithoutUsersInput[]
    createMany?: PengajuanCreateManyUsersInputEnvelope
    connect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
  }

  export type PengajuanCreateNestedManyWithoutAccByInput = {
    create?: XOR<PengajuanCreateWithoutAccByInput, PengajuanUncheckedCreateWithoutAccByInput> | PengajuanCreateWithoutAccByInput[] | PengajuanUncheckedCreateWithoutAccByInput[]
    connectOrCreate?: PengajuanCreateOrConnectWithoutAccByInput | PengajuanCreateOrConnectWithoutAccByInput[]
    createMany?: PengajuanCreateManyAccByInputEnvelope
    connect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
  }

  export type AlamatUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<AlamatCreateWithoutUsersInput, AlamatUncheckedCreateWithoutUsersInput> | AlamatCreateWithoutUsersInput[] | AlamatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AlamatCreateOrConnectWithoutUsersInput | AlamatCreateOrConnectWithoutUsersInput[]
    createMany?: AlamatCreateManyUsersInputEnvelope
    connect?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type TransaksiUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TransaksiCreateWithoutUserInput, TransaksiUncheckedCreateWithoutUserInput> | TransaksiCreateWithoutUserInput[] | TransaksiUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutUserInput | TransaksiCreateOrConnectWithoutUserInput[]
    createMany?: TransaksiCreateManyUserInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type LikesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput> | LikesCreateWithoutUserInput[] | LikesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutUserInput | LikesCreateOrConnectWithoutUserInput[]
    createMany?: LikesCreateManyUserInputEnvelope
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
  }

  export type PengajuanUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<PengajuanCreateWithoutUsersInput, PengajuanUncheckedCreateWithoutUsersInput> | PengajuanCreateWithoutUsersInput[] | PengajuanUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PengajuanCreateOrConnectWithoutUsersInput | PengajuanCreateOrConnectWithoutUsersInput[]
    createMany?: PengajuanCreateManyUsersInputEnvelope
    connect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
  }

  export type PengajuanUncheckedCreateNestedManyWithoutAccByInput = {
    create?: XOR<PengajuanCreateWithoutAccByInput, PengajuanUncheckedCreateWithoutAccByInput> | PengajuanCreateWithoutAccByInput[] | PengajuanUncheckedCreateWithoutAccByInput[]
    connectOrCreate?: PengajuanCreateOrConnectWithoutAccByInput | PengajuanCreateOrConnectWithoutAccByInput[]
    createMany?: PengajuanCreateManyAccByInputEnvelope
    connect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AlamatUpdateOneWithoutTokoNestedInput = {
    create?: XOR<AlamatCreateWithoutTokoInput, AlamatUncheckedCreateWithoutTokoInput>
    connectOrCreate?: AlamatCreateOrConnectWithoutTokoInput
    upsert?: AlamatUpsertWithoutTokoInput
    disconnect?: AlamatWhereInput | boolean
    delete?: AlamatWhereInput | boolean
    connect?: AlamatWhereUniqueInput
    update?: XOR<XOR<AlamatUpdateToOneWithWhereWithoutTokoInput, AlamatUpdateWithoutTokoInput>, AlamatUncheckedUpdateWithoutTokoInput>
  }

  export type AlamatUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AlamatCreateWithoutUsersInput, AlamatUncheckedCreateWithoutUsersInput> | AlamatCreateWithoutUsersInput[] | AlamatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AlamatCreateOrConnectWithoutUsersInput | AlamatCreateOrConnectWithoutUsersInput[]
    upsert?: AlamatUpsertWithWhereUniqueWithoutUsersInput | AlamatUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: AlamatCreateManyUsersInputEnvelope
    set?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
    disconnect?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
    delete?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
    connect?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
    update?: AlamatUpdateWithWhereUniqueWithoutUsersInput | AlamatUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AlamatUpdateManyWithWhereWithoutUsersInput | AlamatUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AlamatScalarWhereInput | AlamatScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUserInput | ProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUserInput | ProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUserInput | ProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type TransaksiUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransaksiCreateWithoutUserInput, TransaksiUncheckedCreateWithoutUserInput> | TransaksiCreateWithoutUserInput[] | TransaksiUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutUserInput | TransaksiCreateOrConnectWithoutUserInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutUserInput | TransaksiUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransaksiCreateManyUserInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutUserInput | TransaksiUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutUserInput | TransaksiUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type LikesUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput> | LikesCreateWithoutUserInput[] | LikesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutUserInput | LikesCreateOrConnectWithoutUserInput[]
    upsert?: LikesUpsertWithWhereUniqueWithoutUserInput | LikesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikesCreateManyUserInputEnvelope
    set?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    disconnect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    delete?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    update?: LikesUpdateWithWhereUniqueWithoutUserInput | LikesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikesUpdateManyWithWhereWithoutUserInput | LikesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikesScalarWhereInput | LikesScalarWhereInput[]
  }

  export type PengajuanUpdateManyWithoutUsersNestedInput = {
    create?: XOR<PengajuanCreateWithoutUsersInput, PengajuanUncheckedCreateWithoutUsersInput> | PengajuanCreateWithoutUsersInput[] | PengajuanUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PengajuanCreateOrConnectWithoutUsersInput | PengajuanCreateOrConnectWithoutUsersInput[]
    upsert?: PengajuanUpsertWithWhereUniqueWithoutUsersInput | PengajuanUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: PengajuanCreateManyUsersInputEnvelope
    set?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    disconnect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    delete?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    connect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    update?: PengajuanUpdateWithWhereUniqueWithoutUsersInput | PengajuanUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: PengajuanUpdateManyWithWhereWithoutUsersInput | PengajuanUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: PengajuanScalarWhereInput | PengajuanScalarWhereInput[]
  }

  export type PengajuanUpdateManyWithoutAccByNestedInput = {
    create?: XOR<PengajuanCreateWithoutAccByInput, PengajuanUncheckedCreateWithoutAccByInput> | PengajuanCreateWithoutAccByInput[] | PengajuanUncheckedCreateWithoutAccByInput[]
    connectOrCreate?: PengajuanCreateOrConnectWithoutAccByInput | PengajuanCreateOrConnectWithoutAccByInput[]
    upsert?: PengajuanUpsertWithWhereUniqueWithoutAccByInput | PengajuanUpsertWithWhereUniqueWithoutAccByInput[]
    createMany?: PengajuanCreateManyAccByInputEnvelope
    set?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    disconnect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    delete?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    connect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    update?: PengajuanUpdateWithWhereUniqueWithoutAccByInput | PengajuanUpdateWithWhereUniqueWithoutAccByInput[]
    updateMany?: PengajuanUpdateManyWithWhereWithoutAccByInput | PengajuanUpdateManyWithWhereWithoutAccByInput[]
    deleteMany?: PengajuanScalarWhereInput | PengajuanScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AlamatUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<AlamatCreateWithoutUsersInput, AlamatUncheckedCreateWithoutUsersInput> | AlamatCreateWithoutUsersInput[] | AlamatUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: AlamatCreateOrConnectWithoutUsersInput | AlamatCreateOrConnectWithoutUsersInput[]
    upsert?: AlamatUpsertWithWhereUniqueWithoutUsersInput | AlamatUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: AlamatCreateManyUsersInputEnvelope
    set?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
    disconnect?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
    delete?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
    connect?: AlamatWhereUniqueInput | AlamatWhereUniqueInput[]
    update?: AlamatUpdateWithWhereUniqueWithoutUsersInput | AlamatUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: AlamatUpdateManyWithWhereWithoutUsersInput | AlamatUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: AlamatScalarWhereInput | AlamatScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUserInput | ProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUserInput | ProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUserInput | ProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type TransaksiUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TransaksiCreateWithoutUserInput, TransaksiUncheckedCreateWithoutUserInput> | TransaksiCreateWithoutUserInput[] | TransaksiUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutUserInput | TransaksiCreateOrConnectWithoutUserInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutUserInput | TransaksiUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TransaksiCreateManyUserInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutUserInput | TransaksiUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutUserInput | TransaksiUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type LikesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput> | LikesCreateWithoutUserInput[] | LikesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutUserInput | LikesCreateOrConnectWithoutUserInput[]
    upsert?: LikesUpsertWithWhereUniqueWithoutUserInput | LikesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LikesCreateManyUserInputEnvelope
    set?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    disconnect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    delete?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    update?: LikesUpdateWithWhereUniqueWithoutUserInput | LikesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LikesUpdateManyWithWhereWithoutUserInput | LikesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LikesScalarWhereInput | LikesScalarWhereInput[]
  }

  export type PengajuanUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<PengajuanCreateWithoutUsersInput, PengajuanUncheckedCreateWithoutUsersInput> | PengajuanCreateWithoutUsersInput[] | PengajuanUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PengajuanCreateOrConnectWithoutUsersInput | PengajuanCreateOrConnectWithoutUsersInput[]
    upsert?: PengajuanUpsertWithWhereUniqueWithoutUsersInput | PengajuanUpsertWithWhereUniqueWithoutUsersInput[]
    createMany?: PengajuanCreateManyUsersInputEnvelope
    set?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    disconnect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    delete?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    connect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    update?: PengajuanUpdateWithWhereUniqueWithoutUsersInput | PengajuanUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: PengajuanUpdateManyWithWhereWithoutUsersInput | PengajuanUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: PengajuanScalarWhereInput | PengajuanScalarWhereInput[]
  }

  export type PengajuanUncheckedUpdateManyWithoutAccByNestedInput = {
    create?: XOR<PengajuanCreateWithoutAccByInput, PengajuanUncheckedCreateWithoutAccByInput> | PengajuanCreateWithoutAccByInput[] | PengajuanUncheckedCreateWithoutAccByInput[]
    connectOrCreate?: PengajuanCreateOrConnectWithoutAccByInput | PengajuanCreateOrConnectWithoutAccByInput[]
    upsert?: PengajuanUpsertWithWhereUniqueWithoutAccByInput | PengajuanUpsertWithWhereUniqueWithoutAccByInput[]
    createMany?: PengajuanCreateManyAccByInputEnvelope
    set?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    disconnect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    delete?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    connect?: PengajuanWhereUniqueInput | PengajuanWhereUniqueInput[]
    update?: PengajuanUpdateWithWhereUniqueWithoutAccByInput | PengajuanUpdateWithWhereUniqueWithoutAccByInput[]
    updateMany?: PengajuanUpdateManyWithWhereWithoutAccByInput | PengajuanUpdateManyWithWhereWithoutAccByInput[]
    deleteMany?: PengajuanScalarWhereInput | PengajuanScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutProductInput = {
    create?: XOR<UsersCreateWithoutProductInput, UsersUncheckedCreateWithoutProductInput>
    connectOrCreate?: UsersCreateOrConnectWithoutProductInput
    connect?: UsersWhereUniqueInput
  }

  export type TransaksiCreateNestedManyWithoutProductInput = {
    create?: XOR<TransaksiCreateWithoutProductInput, TransaksiUncheckedCreateWithoutProductInput> | TransaksiCreateWithoutProductInput[] | TransaksiUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutProductInput | TransaksiCreateOrConnectWithoutProductInput[]
    createMany?: TransaksiCreateManyProductInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type ReviewCreateNestedManyWithoutProductInput = {
    create?: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput> | ReviewCreateWithoutProductInput[] | ReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProductInput | ReviewCreateOrConnectWithoutProductInput[]
    createMany?: ReviewCreateManyProductInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type LikesCreateNestedManyWithoutProductInput = {
    create?: XOR<LikesCreateWithoutProductInput, LikesUncheckedCreateWithoutProductInput> | LikesCreateWithoutProductInput[] | LikesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutProductInput | LikesCreateOrConnectWithoutProductInput[]
    createMany?: LikesCreateManyProductInputEnvelope
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
  }

  export type TransaksiUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<TransaksiCreateWithoutProductInput, TransaksiUncheckedCreateWithoutProductInput> | TransaksiCreateWithoutProductInput[] | TransaksiUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutProductInput | TransaksiCreateOrConnectWithoutProductInput[]
    createMany?: TransaksiCreateManyProductInputEnvelope
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput> | ReviewCreateWithoutProductInput[] | ReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProductInput | ReviewCreateOrConnectWithoutProductInput[]
    createMany?: ReviewCreateManyProductInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type LikesUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<LikesCreateWithoutProductInput, LikesUncheckedCreateWithoutProductInput> | LikesCreateWithoutProductInput[] | LikesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutProductInput | LikesCreateOrConnectWithoutProductInput[]
    createMany?: LikesCreateManyProductInputEnvelope
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
  }

  export type UsersUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<UsersCreateWithoutProductInput, UsersUncheckedCreateWithoutProductInput>
    connectOrCreate?: UsersCreateOrConnectWithoutProductInput
    upsert?: UsersUpsertWithoutProductInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutProductInput, UsersUpdateWithoutProductInput>, UsersUncheckedUpdateWithoutProductInput>
  }

  export type TransaksiUpdateManyWithoutProductNestedInput = {
    create?: XOR<TransaksiCreateWithoutProductInput, TransaksiUncheckedCreateWithoutProductInput> | TransaksiCreateWithoutProductInput[] | TransaksiUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutProductInput | TransaksiCreateOrConnectWithoutProductInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutProductInput | TransaksiUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: TransaksiCreateManyProductInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutProductInput | TransaksiUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutProductInput | TransaksiUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type ReviewUpdateManyWithoutProductNestedInput = {
    create?: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput> | ReviewCreateWithoutProductInput[] | ReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProductInput | ReviewCreateOrConnectWithoutProductInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutProductInput | ReviewUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ReviewCreateManyProductInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutProductInput | ReviewUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutProductInput | ReviewUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type LikesUpdateManyWithoutProductNestedInput = {
    create?: XOR<LikesCreateWithoutProductInput, LikesUncheckedCreateWithoutProductInput> | LikesCreateWithoutProductInput[] | LikesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutProductInput | LikesCreateOrConnectWithoutProductInput[]
    upsert?: LikesUpsertWithWhereUniqueWithoutProductInput | LikesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: LikesCreateManyProductInputEnvelope
    set?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    disconnect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    delete?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    update?: LikesUpdateWithWhereUniqueWithoutProductInput | LikesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: LikesUpdateManyWithWhereWithoutProductInput | LikesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: LikesScalarWhereInput | LikesScalarWhereInput[]
  }

  export type TransaksiUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<TransaksiCreateWithoutProductInput, TransaksiUncheckedCreateWithoutProductInput> | TransaksiCreateWithoutProductInput[] | TransaksiUncheckedCreateWithoutProductInput[]
    connectOrCreate?: TransaksiCreateOrConnectWithoutProductInput | TransaksiCreateOrConnectWithoutProductInput[]
    upsert?: TransaksiUpsertWithWhereUniqueWithoutProductInput | TransaksiUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: TransaksiCreateManyProductInputEnvelope
    set?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    disconnect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    delete?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    connect?: TransaksiWhereUniqueInput | TransaksiWhereUniqueInput[]
    update?: TransaksiUpdateWithWhereUniqueWithoutProductInput | TransaksiUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: TransaksiUpdateManyWithWhereWithoutProductInput | TransaksiUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput> | ReviewCreateWithoutProductInput[] | ReviewUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutProductInput | ReviewCreateOrConnectWithoutProductInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutProductInput | ReviewUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ReviewCreateManyProductInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutProductInput | ReviewUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutProductInput | ReviewUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type LikesUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<LikesCreateWithoutProductInput, LikesUncheckedCreateWithoutProductInput> | LikesCreateWithoutProductInput[] | LikesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: LikesCreateOrConnectWithoutProductInput | LikesCreateOrConnectWithoutProductInput[]
    upsert?: LikesUpsertWithWhereUniqueWithoutProductInput | LikesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: LikesCreateManyProductInputEnvelope
    set?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    disconnect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    delete?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    connect?: LikesWhereUniqueInput | LikesWhereUniqueInput[]
    update?: LikesUpdateWithWhereUniqueWithoutProductInput | LikesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: LikesUpdateManyWithWhereWithoutProductInput | LikesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: LikesScalarWhereInput | LikesScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutTransaksiInput = {
    create?: XOR<UsersCreateWithoutTransaksiInput, UsersUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTransaksiInput
    connect?: UsersWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutTransaksiInput = {
    create?: XOR<ProductCreateWithoutTransaksiInput, ProductUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: ProductCreateOrConnectWithoutTransaksiInput
    connect?: ProductWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutTransaksiNestedInput = {
    create?: XOR<UsersCreateWithoutTransaksiInput, UsersUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: UsersCreateOrConnectWithoutTransaksiInput
    upsert?: UsersUpsertWithoutTransaksiInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutTransaksiInput, UsersUpdateWithoutTransaksiInput>, UsersUncheckedUpdateWithoutTransaksiInput>
  }

  export type ProductUpdateOneRequiredWithoutTransaksiNestedInput = {
    create?: XOR<ProductCreateWithoutTransaksiInput, ProductUncheckedCreateWithoutTransaksiInput>
    connectOrCreate?: ProductCreateOrConnectWithoutTransaksiInput
    upsert?: ProductUpsertWithoutTransaksiInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutTransaksiInput, ProductUpdateWithoutTransaksiInput>, ProductUncheckedUpdateWithoutTransaksiInput>
  }

  export type UsersCreateNestedOneWithoutReviewInput = {
    create?: XOR<UsersCreateWithoutReviewInput, UsersUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UsersCreateOrConnectWithoutReviewInput
    connect?: UsersWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutReviewInput = {
    create?: XOR<ProductCreateWithoutReviewInput, ProductUncheckedCreateWithoutReviewInput>
    connectOrCreate?: ProductCreateOrConnectWithoutReviewInput
    connect?: ProductWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<UsersCreateWithoutReviewInput, UsersUncheckedCreateWithoutReviewInput>
    connectOrCreate?: UsersCreateOrConnectWithoutReviewInput
    upsert?: UsersUpsertWithoutReviewInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutReviewInput, UsersUpdateWithoutReviewInput>, UsersUncheckedUpdateWithoutReviewInput>
  }

  export type ProductUpdateOneRequiredWithoutReviewNestedInput = {
    create?: XOR<ProductCreateWithoutReviewInput, ProductUncheckedCreateWithoutReviewInput>
    connectOrCreate?: ProductCreateOrConnectWithoutReviewInput
    upsert?: ProductUpsertWithoutReviewInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutReviewInput, ProductUpdateWithoutReviewInput>, ProductUncheckedUpdateWithoutReviewInput>
  }

  export type UsersCreateNestedOneWithoutLikesInput = {
    create?: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikesInput
    connect?: UsersWhereUniqueInput
  }

  export type ProductCreateNestedOneWithoutLikesInput = {
    create?: XOR<ProductCreateWithoutLikesInput, ProductUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutLikesInput
    connect?: ProductWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UsersUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    connectOrCreate?: UsersCreateOrConnectWithoutLikesInput
    upsert?: UsersUpsertWithoutLikesInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutLikesInput, UsersUpdateWithoutLikesInput>, UsersUncheckedUpdateWithoutLikesInput>
  }

  export type ProductUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<ProductCreateWithoutLikesInput, ProductUncheckedCreateWithoutLikesInput>
    connectOrCreate?: ProductCreateOrConnectWithoutLikesInput
    upsert?: ProductUpsertWithoutLikesInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutLikesInput, ProductUpdateWithoutLikesInput>, ProductUncheckedUpdateWithoutLikesInput>
  }

  export type UsersCreateNestedOneWithoutAlamatInput = {
    create?: XOR<UsersCreateWithoutAlamatInput, UsersUncheckedCreateWithoutAlamatInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAlamatInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedManyWithoutAlmt_tkInput = {
    create?: XOR<UsersCreateWithoutAlmt_tkInput, UsersUncheckedCreateWithoutAlmt_tkInput> | UsersCreateWithoutAlmt_tkInput[] | UsersUncheckedCreateWithoutAlmt_tkInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAlmt_tkInput | UsersCreateOrConnectWithoutAlmt_tkInput[]
    createMany?: UsersCreateManyAlmt_tkInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUncheckedCreateNestedManyWithoutAlmt_tkInput = {
    create?: XOR<UsersCreateWithoutAlmt_tkInput, UsersUncheckedCreateWithoutAlmt_tkInput> | UsersCreateWithoutAlmt_tkInput[] | UsersUncheckedCreateWithoutAlmt_tkInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAlmt_tkInput | UsersCreateOrConnectWithoutAlmt_tkInput[]
    createMany?: UsersCreateManyAlmt_tkInputEnvelope
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
  }

  export type UsersUpdateOneRequiredWithoutAlamatNestedInput = {
    create?: XOR<UsersCreateWithoutAlamatInput, UsersUncheckedCreateWithoutAlamatInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAlamatInput
    upsert?: UsersUpsertWithoutAlamatInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAlamatInput, UsersUpdateWithoutAlamatInput>, UsersUncheckedUpdateWithoutAlamatInput>
  }

  export type UsersUpdateManyWithoutAlmt_tkNestedInput = {
    create?: XOR<UsersCreateWithoutAlmt_tkInput, UsersUncheckedCreateWithoutAlmt_tkInput> | UsersCreateWithoutAlmt_tkInput[] | UsersUncheckedCreateWithoutAlmt_tkInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAlmt_tkInput | UsersCreateOrConnectWithoutAlmt_tkInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutAlmt_tkInput | UsersUpsertWithWhereUniqueWithoutAlmt_tkInput[]
    createMany?: UsersCreateManyAlmt_tkInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutAlmt_tkInput | UsersUpdateWithWhereUniqueWithoutAlmt_tkInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutAlmt_tkInput | UsersUpdateManyWithWhereWithoutAlmt_tkInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersUncheckedUpdateManyWithoutAlmt_tkNestedInput = {
    create?: XOR<UsersCreateWithoutAlmt_tkInput, UsersUncheckedCreateWithoutAlmt_tkInput> | UsersCreateWithoutAlmt_tkInput[] | UsersUncheckedCreateWithoutAlmt_tkInput[]
    connectOrCreate?: UsersCreateOrConnectWithoutAlmt_tkInput | UsersCreateOrConnectWithoutAlmt_tkInput[]
    upsert?: UsersUpsertWithWhereUniqueWithoutAlmt_tkInput | UsersUpsertWithWhereUniqueWithoutAlmt_tkInput[]
    createMany?: UsersCreateManyAlmt_tkInputEnvelope
    set?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    disconnect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    delete?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    connect?: UsersWhereUniqueInput | UsersWhereUniqueInput[]
    update?: UsersUpdateWithWhereUniqueWithoutAlmt_tkInput | UsersUpdateWithWhereUniqueWithoutAlmt_tkInput[]
    updateMany?: UsersUpdateManyWithWhereWithoutAlmt_tkInput | UsersUpdateManyWithWhereWithoutAlmt_tkInput[]
    deleteMany?: UsersScalarWhereInput | UsersScalarWhereInput[]
  }

  export type UsersCreateNestedOneWithoutPengajuanInput = {
    create?: XOR<UsersCreateWithoutPengajuanInput, UsersUncheckedCreateWithoutPengajuanInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPengajuanInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersCreateNestedOneWithoutAccByInput = {
    create?: XOR<UsersCreateWithoutAccByInput, UsersUncheckedCreateWithoutAccByInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAccByInput
    connect?: UsersWhereUniqueInput
  }

  export type UsersUpdateOneRequiredWithoutPengajuanNestedInput = {
    create?: XOR<UsersCreateWithoutPengajuanInput, UsersUncheckedCreateWithoutPengajuanInput>
    connectOrCreate?: UsersCreateOrConnectWithoutPengajuanInput
    upsert?: UsersUpsertWithoutPengajuanInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutPengajuanInput, UsersUpdateWithoutPengajuanInput>, UsersUncheckedUpdateWithoutPengajuanInput>
  }

  export type UsersUpdateOneRequiredWithoutAccByNestedInput = {
    create?: XOR<UsersCreateWithoutAccByInput, UsersUncheckedCreateWithoutAccByInput>
    connectOrCreate?: UsersCreateOrConnectWithoutAccByInput
    upsert?: UsersUpsertWithoutAccByInput
    connect?: UsersWhereUniqueInput
    update?: XOR<XOR<UsersUpdateToOneWithWhereWithoutAccByInput, UsersUpdateWithoutAccByInput>, UsersUncheckedUpdateWithoutAccByInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AlamatCreateWithoutTokoInput = {
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail?: string
    catatan?: string
    users: UsersCreateNestedOneWithoutAlamatInput
  }

  export type AlamatUncheckedCreateWithoutTokoInput = {
    id?: number
    userId: number
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail?: string
    catatan?: string
  }

  export type AlamatCreateOrConnectWithoutTokoInput = {
    where: AlamatWhereUniqueInput
    create: XOR<AlamatCreateWithoutTokoInput, AlamatUncheckedCreateWithoutTokoInput>
  }

  export type AlamatCreateWithoutUsersInput = {
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail?: string
    catatan?: string
    toko?: UsersCreateNestedManyWithoutAlmt_tkInput
  }

  export type AlamatUncheckedCreateWithoutUsersInput = {
    id?: number
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail?: string
    catatan?: string
    toko?: UsersUncheckedCreateNestedManyWithoutAlmt_tkInput
  }

  export type AlamatCreateOrConnectWithoutUsersInput = {
    where: AlamatWhereUniqueInput
    create: XOR<AlamatCreateWithoutUsersInput, AlamatUncheckedCreateWithoutUsersInput>
  }

  export type AlamatCreateManyUsersInputEnvelope = {
    data: AlamatCreateManyUsersInput | AlamatCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutUserInput = {
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    transaksi?: TransaksiCreateNestedManyWithoutProductInput
    review?: ReviewCreateNestedManyWithoutProductInput
    likes?: LikesCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutUserInput = {
    id?: number
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutProductInput
    review?: ReviewUncheckedCreateNestedManyWithoutProductInput
    likes?: LikesUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutUserInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductCreateManyUserInputEnvelope = {
    data: ProductCreateManyUserInput | ProductCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TransaksiCreateWithoutUserInput = {
    status: number
    product: ProductCreateNestedOneWithoutTransaksiInput
  }

  export type TransaksiUncheckedCreateWithoutUserInput = {
    id?: number
    productId: number
    status: number
  }

  export type TransaksiCreateOrConnectWithoutUserInput = {
    where: TransaksiWhereUniqueInput
    create: XOR<TransaksiCreateWithoutUserInput, TransaksiUncheckedCreateWithoutUserInput>
  }

  export type TransaksiCreateManyUserInputEnvelope = {
    data: TransaksiCreateManyUserInput | TransaksiCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutUserInput = {
    review: string
    rating: number
    product: ProductCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    id?: number
    productId: number
    review: string
    rating: number
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LikesCreateWithoutUserInput = {
    time: Date | string
    product: ProductCreateNestedOneWithoutLikesInput
  }

  export type LikesUncheckedCreateWithoutUserInput = {
    id?: number
    productId: number
    time: Date | string
  }

  export type LikesCreateOrConnectWithoutUserInput = {
    where: LikesWhereUniqueInput
    create: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput>
  }

  export type LikesCreateManyUserInputEnvelope = {
    data: LikesCreateManyUserInput | LikesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PengajuanCreateWithoutUsersInput = {
    time: Date | string
    status: number
    AccBy: UsersCreateNestedOneWithoutAccByInput
  }

  export type PengajuanUncheckedCreateWithoutUsersInput = {
    id?: number
    time: Date | string
    status: number
    accBy: number
  }

  export type PengajuanCreateOrConnectWithoutUsersInput = {
    where: PengajuanWhereUniqueInput
    create: XOR<PengajuanCreateWithoutUsersInput, PengajuanUncheckedCreateWithoutUsersInput>
  }

  export type PengajuanCreateManyUsersInputEnvelope = {
    data: PengajuanCreateManyUsersInput | PengajuanCreateManyUsersInput[]
    skipDuplicates?: boolean
  }

  export type PengajuanCreateWithoutAccByInput = {
    time: Date | string
    status: number
    users: UsersCreateNestedOneWithoutPengajuanInput
  }

  export type PengajuanUncheckedCreateWithoutAccByInput = {
    id?: number
    userId: number
    time: Date | string
    status: number
  }

  export type PengajuanCreateOrConnectWithoutAccByInput = {
    where: PengajuanWhereUniqueInput
    create: XOR<PengajuanCreateWithoutAccByInput, PengajuanUncheckedCreateWithoutAccByInput>
  }

  export type PengajuanCreateManyAccByInputEnvelope = {
    data: PengajuanCreateManyAccByInput | PengajuanCreateManyAccByInput[]
    skipDuplicates?: boolean
  }

  export type AlamatUpsertWithoutTokoInput = {
    update: XOR<AlamatUpdateWithoutTokoInput, AlamatUncheckedUpdateWithoutTokoInput>
    create: XOR<AlamatCreateWithoutTokoInput, AlamatUncheckedCreateWithoutTokoInput>
    where?: AlamatWhereInput
  }

  export type AlamatUpdateToOneWithWhereWithoutTokoInput = {
    where?: AlamatWhereInput
    data: XOR<AlamatUpdateWithoutTokoInput, AlamatUncheckedUpdateWithoutTokoInput>
  }

  export type AlamatUpdateWithoutTokoInput = {
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    users?: UsersUpdateOneRequiredWithoutAlamatNestedInput
  }

  export type AlamatUncheckedUpdateWithoutTokoInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
  }

  export type AlamatUpsertWithWhereUniqueWithoutUsersInput = {
    where: AlamatWhereUniqueInput
    update: XOR<AlamatUpdateWithoutUsersInput, AlamatUncheckedUpdateWithoutUsersInput>
    create: XOR<AlamatCreateWithoutUsersInput, AlamatUncheckedCreateWithoutUsersInput>
  }

  export type AlamatUpdateWithWhereUniqueWithoutUsersInput = {
    where: AlamatWhereUniqueInput
    data: XOR<AlamatUpdateWithoutUsersInput, AlamatUncheckedUpdateWithoutUsersInput>
  }

  export type AlamatUpdateManyWithWhereWithoutUsersInput = {
    where: AlamatScalarWhereInput
    data: XOR<AlamatUpdateManyMutationInput, AlamatUncheckedUpdateManyWithoutUsersInput>
  }

  export type AlamatScalarWhereInput = {
    AND?: AlamatScalarWhereInput | AlamatScalarWhereInput[]
    OR?: AlamatScalarWhereInput[]
    NOT?: AlamatScalarWhereInput | AlamatScalarWhereInput[]
    id?: IntFilter<"Alamat"> | number
    userId?: IntFilter<"Alamat"> | number
    provinsi?: StringFilter<"Alamat"> | string
    kabupaten?: StringFilter<"Alamat"> | string
    kecamatan?: StringFilter<"Alamat"> | string
    desa?: StringFilter<"Alamat"> | string
    kode_pos?: StringFilter<"Alamat"> | string
    detail?: StringFilter<"Alamat"> | string
    catatan?: StringFilter<"Alamat"> | string
  }

  export type ProductUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
  }

  export type ProductUpdateManyWithWhereWithoutUserInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutUserInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: IntFilter<"Product"> | number
    userId?: IntFilter<"Product"> | number
    nama?: StringFilter<"Product"> | string
    stock?: IntFilter<"Product"> | number
    harga?: IntFilter<"Product"> | number
    desc?: StringFilter<"Product"> | string
    path?: StringFilter<"Product"> | string
  }

  export type TransaksiUpsertWithWhereUniqueWithoutUserInput = {
    where: TransaksiWhereUniqueInput
    update: XOR<TransaksiUpdateWithoutUserInput, TransaksiUncheckedUpdateWithoutUserInput>
    create: XOR<TransaksiCreateWithoutUserInput, TransaksiUncheckedCreateWithoutUserInput>
  }

  export type TransaksiUpdateWithWhereUniqueWithoutUserInput = {
    where: TransaksiWhereUniqueInput
    data: XOR<TransaksiUpdateWithoutUserInput, TransaksiUncheckedUpdateWithoutUserInput>
  }

  export type TransaksiUpdateManyWithWhereWithoutUserInput = {
    where: TransaksiScalarWhereInput
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyWithoutUserInput>
  }

  export type TransaksiScalarWhereInput = {
    AND?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
    OR?: TransaksiScalarWhereInput[]
    NOT?: TransaksiScalarWhereInput | TransaksiScalarWhereInput[]
    id?: IntFilter<"Transaksi"> | number
    userId?: IntFilter<"Transaksi"> | number
    productId?: IntFilter<"Transaksi"> | number
    status?: IntFilter<"Transaksi"> | number
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    id?: IntFilter<"Review"> | number
    userId?: IntFilter<"Review"> | number
    productId?: IntFilter<"Review"> | number
    review?: StringFilter<"Review"> | string
    rating?: FloatFilter<"Review"> | number
  }

  export type LikesUpsertWithWhereUniqueWithoutUserInput = {
    where: LikesWhereUniqueInput
    update: XOR<LikesUpdateWithoutUserInput, LikesUncheckedUpdateWithoutUserInput>
    create: XOR<LikesCreateWithoutUserInput, LikesUncheckedCreateWithoutUserInput>
  }

  export type LikesUpdateWithWhereUniqueWithoutUserInput = {
    where: LikesWhereUniqueInput
    data: XOR<LikesUpdateWithoutUserInput, LikesUncheckedUpdateWithoutUserInput>
  }

  export type LikesUpdateManyWithWhereWithoutUserInput = {
    where: LikesScalarWhereInput
    data: XOR<LikesUpdateManyMutationInput, LikesUncheckedUpdateManyWithoutUserInput>
  }

  export type LikesScalarWhereInput = {
    AND?: LikesScalarWhereInput | LikesScalarWhereInput[]
    OR?: LikesScalarWhereInput[]
    NOT?: LikesScalarWhereInput | LikesScalarWhereInput[]
    id?: IntFilter<"Likes"> | number
    userId?: IntFilter<"Likes"> | number
    productId?: IntFilter<"Likes"> | number
    time?: DateTimeFilter<"Likes"> | Date | string
  }

  export type PengajuanUpsertWithWhereUniqueWithoutUsersInput = {
    where: PengajuanWhereUniqueInput
    update: XOR<PengajuanUpdateWithoutUsersInput, PengajuanUncheckedUpdateWithoutUsersInput>
    create: XOR<PengajuanCreateWithoutUsersInput, PengajuanUncheckedCreateWithoutUsersInput>
  }

  export type PengajuanUpdateWithWhereUniqueWithoutUsersInput = {
    where: PengajuanWhereUniqueInput
    data: XOR<PengajuanUpdateWithoutUsersInput, PengajuanUncheckedUpdateWithoutUsersInput>
  }

  export type PengajuanUpdateManyWithWhereWithoutUsersInput = {
    where: PengajuanScalarWhereInput
    data: XOR<PengajuanUpdateManyMutationInput, PengajuanUncheckedUpdateManyWithoutUsersInput>
  }

  export type PengajuanScalarWhereInput = {
    AND?: PengajuanScalarWhereInput | PengajuanScalarWhereInput[]
    OR?: PengajuanScalarWhereInput[]
    NOT?: PengajuanScalarWhereInput | PengajuanScalarWhereInput[]
    id?: IntFilter<"Pengajuan"> | number
    userId?: IntFilter<"Pengajuan"> | number
    time?: DateTimeFilter<"Pengajuan"> | Date | string
    status?: IntFilter<"Pengajuan"> | number
    accBy?: IntFilter<"Pengajuan"> | number
  }

  export type PengajuanUpsertWithWhereUniqueWithoutAccByInput = {
    where: PengajuanWhereUniqueInput
    update: XOR<PengajuanUpdateWithoutAccByInput, PengajuanUncheckedUpdateWithoutAccByInput>
    create: XOR<PengajuanCreateWithoutAccByInput, PengajuanUncheckedCreateWithoutAccByInput>
  }

  export type PengajuanUpdateWithWhereUniqueWithoutAccByInput = {
    where: PengajuanWhereUniqueInput
    data: XOR<PengajuanUpdateWithoutAccByInput, PengajuanUncheckedUpdateWithoutAccByInput>
  }

  export type PengajuanUpdateManyWithWhereWithoutAccByInput = {
    where: PengajuanScalarWhereInput
    data: XOR<PengajuanUpdateManyMutationInput, PengajuanUncheckedUpdateManyWithoutAccByInput>
  }

  export type UsersCreateWithoutProductInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    almt_tk?: AlamatCreateNestedOneWithoutTokoInput
    alamat?: AlamatCreateNestedManyWithoutUsersInput
    transaksi?: TransaksiCreateNestedManyWithoutUserInput
    review?: ReviewCreateNestedManyWithoutUserInput
    likes?: LikesCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanCreateNestedManyWithoutUsersInput
    accBy?: PengajuanCreateNestedManyWithoutAccByInput
  }

  export type UsersUncheckedCreateWithoutProductInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
    alamat?: AlamatUncheckedCreateNestedManyWithoutUsersInput
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutUserInput
    review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanUncheckedCreateNestedManyWithoutUsersInput
    accBy?: PengajuanUncheckedCreateNestedManyWithoutAccByInput
  }

  export type UsersCreateOrConnectWithoutProductInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutProductInput, UsersUncheckedCreateWithoutProductInput>
  }

  export type TransaksiCreateWithoutProductInput = {
    status: number
    user: UsersCreateNestedOneWithoutTransaksiInput
  }

  export type TransaksiUncheckedCreateWithoutProductInput = {
    id?: number
    userId: number
    status: number
  }

  export type TransaksiCreateOrConnectWithoutProductInput = {
    where: TransaksiWhereUniqueInput
    create: XOR<TransaksiCreateWithoutProductInput, TransaksiUncheckedCreateWithoutProductInput>
  }

  export type TransaksiCreateManyProductInputEnvelope = {
    data: TransaksiCreateManyProductInput | TransaksiCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ReviewCreateWithoutProductInput = {
    review: string
    rating: number
    user: UsersCreateNestedOneWithoutReviewInput
  }

  export type ReviewUncheckedCreateWithoutProductInput = {
    id?: number
    userId: number
    review: string
    rating: number
  }

  export type ReviewCreateOrConnectWithoutProductInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput>
  }

  export type ReviewCreateManyProductInputEnvelope = {
    data: ReviewCreateManyProductInput | ReviewCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type LikesCreateWithoutProductInput = {
    time: Date | string
    user: UsersCreateNestedOneWithoutLikesInput
  }

  export type LikesUncheckedCreateWithoutProductInput = {
    id?: number
    userId: number
    time: Date | string
  }

  export type LikesCreateOrConnectWithoutProductInput = {
    where: LikesWhereUniqueInput
    create: XOR<LikesCreateWithoutProductInput, LikesUncheckedCreateWithoutProductInput>
  }

  export type LikesCreateManyProductInputEnvelope = {
    data: LikesCreateManyProductInput | LikesCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutProductInput = {
    update: XOR<UsersUpdateWithoutProductInput, UsersUncheckedUpdateWithoutProductInput>
    create: XOR<UsersCreateWithoutProductInput, UsersUncheckedCreateWithoutProductInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutProductInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutProductInput, UsersUncheckedUpdateWithoutProductInput>
  }

  export type UsersUpdateWithoutProductInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    almt_tk?: AlamatUpdateOneWithoutTokoNestedInput
    alamat?: AlamatUpdateManyWithoutUsersNestedInput
    transaksi?: TransaksiUpdateManyWithoutUserNestedInput
    review?: ReviewUpdateManyWithoutUserNestedInput
    likes?: LikesUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
    alamat?: AlamatUncheckedUpdateManyWithoutUsersNestedInput
    transaksi?: TransaksiUncheckedUpdateManyWithoutUserNestedInput
    review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUncheckedUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUncheckedUpdateManyWithoutAccByNestedInput
  }

  export type TransaksiUpsertWithWhereUniqueWithoutProductInput = {
    where: TransaksiWhereUniqueInput
    update: XOR<TransaksiUpdateWithoutProductInput, TransaksiUncheckedUpdateWithoutProductInput>
    create: XOR<TransaksiCreateWithoutProductInput, TransaksiUncheckedCreateWithoutProductInput>
  }

  export type TransaksiUpdateWithWhereUniqueWithoutProductInput = {
    where: TransaksiWhereUniqueInput
    data: XOR<TransaksiUpdateWithoutProductInput, TransaksiUncheckedUpdateWithoutProductInput>
  }

  export type TransaksiUpdateManyWithWhereWithoutProductInput = {
    where: TransaksiScalarWhereInput
    data: XOR<TransaksiUpdateManyMutationInput, TransaksiUncheckedUpdateManyWithoutProductInput>
  }

  export type ReviewUpsertWithWhereUniqueWithoutProductInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutProductInput, ReviewUncheckedUpdateWithoutProductInput>
    create: XOR<ReviewCreateWithoutProductInput, ReviewUncheckedCreateWithoutProductInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutProductInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutProductInput, ReviewUncheckedUpdateWithoutProductInput>
  }

  export type ReviewUpdateManyWithWhereWithoutProductInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutProductInput>
  }

  export type LikesUpsertWithWhereUniqueWithoutProductInput = {
    where: LikesWhereUniqueInput
    update: XOR<LikesUpdateWithoutProductInput, LikesUncheckedUpdateWithoutProductInput>
    create: XOR<LikesCreateWithoutProductInput, LikesUncheckedCreateWithoutProductInput>
  }

  export type LikesUpdateWithWhereUniqueWithoutProductInput = {
    where: LikesWhereUniqueInput
    data: XOR<LikesUpdateWithoutProductInput, LikesUncheckedUpdateWithoutProductInput>
  }

  export type LikesUpdateManyWithWhereWithoutProductInput = {
    where: LikesScalarWhereInput
    data: XOR<LikesUpdateManyMutationInput, LikesUncheckedUpdateManyWithoutProductInput>
  }

  export type UsersCreateWithoutTransaksiInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    almt_tk?: AlamatCreateNestedOneWithoutTokoInput
    alamat?: AlamatCreateNestedManyWithoutUsersInput
    product?: ProductCreateNestedManyWithoutUserInput
    review?: ReviewCreateNestedManyWithoutUserInput
    likes?: LikesCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanCreateNestedManyWithoutUsersInput
    accBy?: PengajuanCreateNestedManyWithoutAccByInput
  }

  export type UsersUncheckedCreateWithoutTransaksiInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
    alamat?: AlamatUncheckedCreateNestedManyWithoutUsersInput
    product?: ProductUncheckedCreateNestedManyWithoutUserInput
    review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanUncheckedCreateNestedManyWithoutUsersInput
    accBy?: PengajuanUncheckedCreateNestedManyWithoutAccByInput
  }

  export type UsersCreateOrConnectWithoutTransaksiInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutTransaksiInput, UsersUncheckedCreateWithoutTransaksiInput>
  }

  export type ProductCreateWithoutTransaksiInput = {
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    user: UsersCreateNestedOneWithoutProductInput
    review?: ReviewCreateNestedManyWithoutProductInput
    likes?: LikesCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutTransaksiInput = {
    id?: number
    userId: number
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    review?: ReviewUncheckedCreateNestedManyWithoutProductInput
    likes?: LikesUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutTransaksiInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutTransaksiInput, ProductUncheckedCreateWithoutTransaksiInput>
  }

  export type UsersUpsertWithoutTransaksiInput = {
    update: XOR<UsersUpdateWithoutTransaksiInput, UsersUncheckedUpdateWithoutTransaksiInput>
    create: XOR<UsersCreateWithoutTransaksiInput, UsersUncheckedCreateWithoutTransaksiInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutTransaksiInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutTransaksiInput, UsersUncheckedUpdateWithoutTransaksiInput>
  }

  export type UsersUpdateWithoutTransaksiInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    almt_tk?: AlamatUpdateOneWithoutTokoNestedInput
    alamat?: AlamatUpdateManyWithoutUsersNestedInput
    product?: ProductUpdateManyWithoutUserNestedInput
    review?: ReviewUpdateManyWithoutUserNestedInput
    likes?: LikesUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateWithoutTransaksiInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
    alamat?: AlamatUncheckedUpdateManyWithoutUsersNestedInput
    product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUncheckedUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUncheckedUpdateManyWithoutAccByNestedInput
  }

  export type ProductUpsertWithoutTransaksiInput = {
    update: XOR<ProductUpdateWithoutTransaksiInput, ProductUncheckedUpdateWithoutTransaksiInput>
    create: XOR<ProductCreateWithoutTransaksiInput, ProductUncheckedCreateWithoutTransaksiInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutTransaksiInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutTransaksiInput, ProductUncheckedUpdateWithoutTransaksiInput>
  }

  export type ProductUpdateWithoutTransaksiInput = {
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutProductNestedInput
    review?: ReviewUpdateManyWithoutProductNestedInput
    likes?: LikesUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutTransaksiInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    review?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    likes?: LikesUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UsersCreateWithoutReviewInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    almt_tk?: AlamatCreateNestedOneWithoutTokoInput
    alamat?: AlamatCreateNestedManyWithoutUsersInput
    product?: ProductCreateNestedManyWithoutUserInput
    transaksi?: TransaksiCreateNestedManyWithoutUserInput
    likes?: LikesCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanCreateNestedManyWithoutUsersInput
    accBy?: PengajuanCreateNestedManyWithoutAccByInput
  }

  export type UsersUncheckedCreateWithoutReviewInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
    alamat?: AlamatUncheckedCreateNestedManyWithoutUsersInput
    product?: ProductUncheckedCreateNestedManyWithoutUserInput
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutUserInput
    likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanUncheckedCreateNestedManyWithoutUsersInput
    accBy?: PengajuanUncheckedCreateNestedManyWithoutAccByInput
  }

  export type UsersCreateOrConnectWithoutReviewInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutReviewInput, UsersUncheckedCreateWithoutReviewInput>
  }

  export type ProductCreateWithoutReviewInput = {
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    user: UsersCreateNestedOneWithoutProductInput
    transaksi?: TransaksiCreateNestedManyWithoutProductInput
    likes?: LikesCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutReviewInput = {
    id?: number
    userId: number
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutProductInput
    likes?: LikesUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutReviewInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutReviewInput, ProductUncheckedCreateWithoutReviewInput>
  }

  export type UsersUpsertWithoutReviewInput = {
    update: XOR<UsersUpdateWithoutReviewInput, UsersUncheckedUpdateWithoutReviewInput>
    create: XOR<UsersCreateWithoutReviewInput, UsersUncheckedCreateWithoutReviewInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutReviewInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutReviewInput, UsersUncheckedUpdateWithoutReviewInput>
  }

  export type UsersUpdateWithoutReviewInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    almt_tk?: AlamatUpdateOneWithoutTokoNestedInput
    alamat?: AlamatUpdateManyWithoutUsersNestedInput
    product?: ProductUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUpdateManyWithoutUserNestedInput
    likes?: LikesUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
    alamat?: AlamatUncheckedUpdateManyWithoutUsersNestedInput
    product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUncheckedUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUncheckedUpdateManyWithoutAccByNestedInput
  }

  export type ProductUpsertWithoutReviewInput = {
    update: XOR<ProductUpdateWithoutReviewInput, ProductUncheckedUpdateWithoutReviewInput>
    create: XOR<ProductCreateWithoutReviewInput, ProductUncheckedCreateWithoutReviewInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutReviewInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutReviewInput, ProductUncheckedUpdateWithoutReviewInput>
  }

  export type ProductUpdateWithoutReviewInput = {
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutProductNestedInput
    transaksi?: TransaksiUpdateManyWithoutProductNestedInput
    likes?: LikesUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutReviewInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    transaksi?: TransaksiUncheckedUpdateManyWithoutProductNestedInput
    likes?: LikesUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UsersCreateWithoutLikesInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    almt_tk?: AlamatCreateNestedOneWithoutTokoInput
    alamat?: AlamatCreateNestedManyWithoutUsersInput
    product?: ProductCreateNestedManyWithoutUserInput
    transaksi?: TransaksiCreateNestedManyWithoutUserInput
    review?: ReviewCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanCreateNestedManyWithoutUsersInput
    accBy?: PengajuanCreateNestedManyWithoutAccByInput
  }

  export type UsersUncheckedCreateWithoutLikesInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
    alamat?: AlamatUncheckedCreateNestedManyWithoutUsersInput
    product?: ProductUncheckedCreateNestedManyWithoutUserInput
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutUserInput
    review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanUncheckedCreateNestedManyWithoutUsersInput
    accBy?: PengajuanUncheckedCreateNestedManyWithoutAccByInput
  }

  export type UsersCreateOrConnectWithoutLikesInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
  }

  export type ProductCreateWithoutLikesInput = {
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    user: UsersCreateNestedOneWithoutProductInput
    transaksi?: TransaksiCreateNestedManyWithoutProductInput
    review?: ReviewCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutLikesInput = {
    id?: number
    userId: number
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutProductInput
    review?: ReviewUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutLikesInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutLikesInput, ProductUncheckedCreateWithoutLikesInput>
  }

  export type UsersUpsertWithoutLikesInput = {
    update: XOR<UsersUpdateWithoutLikesInput, UsersUncheckedUpdateWithoutLikesInput>
    create: XOR<UsersCreateWithoutLikesInput, UsersUncheckedCreateWithoutLikesInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutLikesInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutLikesInput, UsersUncheckedUpdateWithoutLikesInput>
  }

  export type UsersUpdateWithoutLikesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    almt_tk?: AlamatUpdateOneWithoutTokoNestedInput
    alamat?: AlamatUpdateManyWithoutUsersNestedInput
    product?: ProductUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUpdateManyWithoutUserNestedInput
    review?: ReviewUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
    alamat?: AlamatUncheckedUpdateManyWithoutUsersNestedInput
    product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUncheckedUpdateManyWithoutUserNestedInput
    review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUncheckedUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUncheckedUpdateManyWithoutAccByNestedInput
  }

  export type ProductUpsertWithoutLikesInput = {
    update: XOR<ProductUpdateWithoutLikesInput, ProductUncheckedUpdateWithoutLikesInput>
    create: XOR<ProductCreateWithoutLikesInput, ProductUncheckedCreateWithoutLikesInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutLikesInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutLikesInput, ProductUncheckedUpdateWithoutLikesInput>
  }

  export type ProductUpdateWithoutLikesInput = {
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    user?: UsersUpdateOneRequiredWithoutProductNestedInput
    transaksi?: TransaksiUpdateManyWithoutProductNestedInput
    review?: ReviewUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutLikesInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    transaksi?: TransaksiUncheckedUpdateManyWithoutProductNestedInput
    review?: ReviewUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UsersCreateWithoutAlamatInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    almt_tk?: AlamatCreateNestedOneWithoutTokoInput
    product?: ProductCreateNestedManyWithoutUserInput
    transaksi?: TransaksiCreateNestedManyWithoutUserInput
    review?: ReviewCreateNestedManyWithoutUserInput
    likes?: LikesCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanCreateNestedManyWithoutUsersInput
    accBy?: PengajuanCreateNestedManyWithoutAccByInput
  }

  export type UsersUncheckedCreateWithoutAlamatInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
    product?: ProductUncheckedCreateNestedManyWithoutUserInput
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutUserInput
    review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanUncheckedCreateNestedManyWithoutUsersInput
    accBy?: PengajuanUncheckedCreateNestedManyWithoutAccByInput
  }

  export type UsersCreateOrConnectWithoutAlamatInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAlamatInput, UsersUncheckedCreateWithoutAlamatInput>
  }

  export type UsersCreateWithoutAlmt_tkInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat?: AlamatCreateNestedManyWithoutUsersInput
    product?: ProductCreateNestedManyWithoutUserInput
    transaksi?: TransaksiCreateNestedManyWithoutUserInput
    review?: ReviewCreateNestedManyWithoutUserInput
    likes?: LikesCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanCreateNestedManyWithoutUsersInput
    accBy?: PengajuanCreateNestedManyWithoutAccByInput
  }

  export type UsersUncheckedCreateWithoutAlmt_tkInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat?: AlamatUncheckedCreateNestedManyWithoutUsersInput
    product?: ProductUncheckedCreateNestedManyWithoutUserInput
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutUserInput
    review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanUncheckedCreateNestedManyWithoutUsersInput
    accBy?: PengajuanUncheckedCreateNestedManyWithoutAccByInput
  }

  export type UsersCreateOrConnectWithoutAlmt_tkInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAlmt_tkInput, UsersUncheckedCreateWithoutAlmt_tkInput>
  }

  export type UsersCreateManyAlmt_tkInputEnvelope = {
    data: UsersCreateManyAlmt_tkInput | UsersCreateManyAlmt_tkInput[]
    skipDuplicates?: boolean
  }

  export type UsersUpsertWithoutAlamatInput = {
    update: XOR<UsersUpdateWithoutAlamatInput, UsersUncheckedUpdateWithoutAlamatInput>
    create: XOR<UsersCreateWithoutAlamatInput, UsersUncheckedCreateWithoutAlamatInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutAlamatInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutAlamatInput, UsersUncheckedUpdateWithoutAlamatInput>
  }

  export type UsersUpdateWithoutAlamatInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    almt_tk?: AlamatUpdateOneWithoutTokoNestedInput
    product?: ProductUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUpdateManyWithoutUserNestedInput
    review?: ReviewUpdateManyWithoutUserNestedInput
    likes?: LikesUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateWithoutAlamatInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
    product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUncheckedUpdateManyWithoutUserNestedInput
    review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUncheckedUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUncheckedUpdateManyWithoutAccByNestedInput
  }

  export type UsersUpsertWithWhereUniqueWithoutAlmt_tkInput = {
    where: UsersWhereUniqueInput
    update: XOR<UsersUpdateWithoutAlmt_tkInput, UsersUncheckedUpdateWithoutAlmt_tkInput>
    create: XOR<UsersCreateWithoutAlmt_tkInput, UsersUncheckedCreateWithoutAlmt_tkInput>
  }

  export type UsersUpdateWithWhereUniqueWithoutAlmt_tkInput = {
    where: UsersWhereUniqueInput
    data: XOR<UsersUpdateWithoutAlmt_tkInput, UsersUncheckedUpdateWithoutAlmt_tkInput>
  }

  export type UsersUpdateManyWithWhereWithoutAlmt_tkInput = {
    where: UsersScalarWhereInput
    data: XOR<UsersUpdateManyMutationInput, UsersUncheckedUpdateManyWithoutAlmt_tkInput>
  }

  export type UsersScalarWhereInput = {
    AND?: UsersScalarWhereInput | UsersScalarWhereInput[]
    OR?: UsersScalarWhereInput[]
    NOT?: UsersScalarWhereInput | UsersScalarWhereInput[]
    id?: IntFilter<"Users"> | number
    email?: StringFilter<"Users"> | string
    password?: StringFilter<"Users"> | string
    firstName?: StringFilter<"Users"> | string
    lastName?: StringFilter<"Users"> | string
    gender?: IntFilter<"Users"> | number
    role?: IntFilter<"Users"> | number
    telp?: StringFilter<"Users"> | string
    buka_toko?: IntFilter<"Users"> | number
    nama_toko?: StringFilter<"Users"> | string
    klasifikasi_toko?: IntFilter<"Users"> | number
    rating_toko?: FloatFilter<"Users"> | number
    alamat_toko?: IntNullableFilter<"Users"> | number | null
  }

  export type UsersCreateWithoutPengajuanInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    almt_tk?: AlamatCreateNestedOneWithoutTokoInput
    alamat?: AlamatCreateNestedManyWithoutUsersInput
    product?: ProductCreateNestedManyWithoutUserInput
    transaksi?: TransaksiCreateNestedManyWithoutUserInput
    review?: ReviewCreateNestedManyWithoutUserInput
    likes?: LikesCreateNestedManyWithoutUserInput
    accBy?: PengajuanCreateNestedManyWithoutAccByInput
  }

  export type UsersUncheckedCreateWithoutPengajuanInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
    alamat?: AlamatUncheckedCreateNestedManyWithoutUsersInput
    product?: ProductUncheckedCreateNestedManyWithoutUserInput
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutUserInput
    review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    accBy?: PengajuanUncheckedCreateNestedManyWithoutAccByInput
  }

  export type UsersCreateOrConnectWithoutPengajuanInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutPengajuanInput, UsersUncheckedCreateWithoutPengajuanInput>
  }

  export type UsersCreateWithoutAccByInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    almt_tk?: AlamatCreateNestedOneWithoutTokoInput
    alamat?: AlamatCreateNestedManyWithoutUsersInput
    product?: ProductCreateNestedManyWithoutUserInput
    transaksi?: TransaksiCreateNestedManyWithoutUserInput
    review?: ReviewCreateNestedManyWithoutUserInput
    likes?: LikesCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanCreateNestedManyWithoutUsersInput
  }

  export type UsersUncheckedCreateWithoutAccByInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
    alamat_toko?: number | null
    alamat?: AlamatUncheckedCreateNestedManyWithoutUsersInput
    product?: ProductUncheckedCreateNestedManyWithoutUserInput
    transaksi?: TransaksiUncheckedCreateNestedManyWithoutUserInput
    review?: ReviewUncheckedCreateNestedManyWithoutUserInput
    likes?: LikesUncheckedCreateNestedManyWithoutUserInput
    pengajuan?: PengajuanUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UsersCreateOrConnectWithoutAccByInput = {
    where: UsersWhereUniqueInput
    create: XOR<UsersCreateWithoutAccByInput, UsersUncheckedCreateWithoutAccByInput>
  }

  export type UsersUpsertWithoutPengajuanInput = {
    update: XOR<UsersUpdateWithoutPengajuanInput, UsersUncheckedUpdateWithoutPengajuanInput>
    create: XOR<UsersCreateWithoutPengajuanInput, UsersUncheckedCreateWithoutPengajuanInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutPengajuanInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutPengajuanInput, UsersUncheckedUpdateWithoutPengajuanInput>
  }

  export type UsersUpdateWithoutPengajuanInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    almt_tk?: AlamatUpdateOneWithoutTokoNestedInput
    alamat?: AlamatUpdateManyWithoutUsersNestedInput
    product?: ProductUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUpdateManyWithoutUserNestedInput
    review?: ReviewUpdateManyWithoutUserNestedInput
    likes?: LikesUpdateManyWithoutUserNestedInput
    accBy?: PengajuanUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateWithoutPengajuanInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
    alamat?: AlamatUncheckedUpdateManyWithoutUsersNestedInput
    product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUncheckedUpdateManyWithoutUserNestedInput
    review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    accBy?: PengajuanUncheckedUpdateManyWithoutAccByNestedInput
  }

  export type UsersUpsertWithoutAccByInput = {
    update: XOR<UsersUpdateWithoutAccByInput, UsersUncheckedUpdateWithoutAccByInput>
    create: XOR<UsersCreateWithoutAccByInput, UsersUncheckedCreateWithoutAccByInput>
    where?: UsersWhereInput
  }

  export type UsersUpdateToOneWithWhereWithoutAccByInput = {
    where?: UsersWhereInput
    data: XOR<UsersUpdateWithoutAccByInput, UsersUncheckedUpdateWithoutAccByInput>
  }

  export type UsersUpdateWithoutAccByInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    almt_tk?: AlamatUpdateOneWithoutTokoNestedInput
    alamat?: AlamatUpdateManyWithoutUsersNestedInput
    product?: ProductUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUpdateManyWithoutUserNestedInput
    review?: ReviewUpdateManyWithoutUserNestedInput
    likes?: LikesUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUpdateManyWithoutUsersNestedInput
  }

  export type UsersUncheckedUpdateWithoutAccByInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat_toko?: NullableIntFieldUpdateOperationsInput | number | null
    alamat?: AlamatUncheckedUpdateManyWithoutUsersNestedInput
    product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUncheckedUpdateManyWithoutUserNestedInput
    review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type AlamatCreateManyUsersInput = {
    id?: number
    provinsi: string
    kabupaten: string
    kecamatan: string
    desa: string
    kode_pos: string
    detail?: string
    catatan?: string
  }

  export type ProductCreateManyUserInput = {
    id?: number
    nama: string
    stock: number
    harga: number
    desc: string
    path: string
  }

  export type TransaksiCreateManyUserInput = {
    id?: number
    productId: number
    status: number
  }

  export type ReviewCreateManyUserInput = {
    id?: number
    productId: number
    review: string
    rating: number
  }

  export type LikesCreateManyUserInput = {
    id?: number
    productId: number
    time: Date | string
  }

  export type PengajuanCreateManyUsersInput = {
    id?: number
    time: Date | string
    status: number
    accBy: number
  }

  export type PengajuanCreateManyAccByInput = {
    id?: number
    userId: number
    time: Date | string
    status: number
  }

  export type AlamatUpdateWithoutUsersInput = {
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    toko?: UsersUpdateManyWithoutAlmt_tkNestedInput
  }

  export type AlamatUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
    toko?: UsersUncheckedUpdateManyWithoutAlmt_tkNestedInput
  }

  export type AlamatUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    provinsi?: StringFieldUpdateOperationsInput | string
    kabupaten?: StringFieldUpdateOperationsInput | string
    kecamatan?: StringFieldUpdateOperationsInput | string
    desa?: StringFieldUpdateOperationsInput | string
    kode_pos?: StringFieldUpdateOperationsInput | string
    detail?: StringFieldUpdateOperationsInput | string
    catatan?: StringFieldUpdateOperationsInput | string
  }

  export type ProductUpdateWithoutUserInput = {
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    transaksi?: TransaksiUpdateManyWithoutProductNestedInput
    review?: ReviewUpdateManyWithoutProductNestedInput
    likes?: LikesUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    transaksi?: TransaksiUncheckedUpdateManyWithoutProductNestedInput
    review?: ReviewUncheckedUpdateManyWithoutProductNestedInput
    likes?: LikesUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nama?: StringFieldUpdateOperationsInput | string
    stock?: IntFieldUpdateOperationsInput | number
    harga?: IntFieldUpdateOperationsInput | number
    desc?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
  }

  export type TransaksiUpdateWithoutUserInput = {
    status?: IntFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutTransaksiNestedInput
  }

  export type TransaksiUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutUserInput = {
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    product?: ProductUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type LikesUpdateWithoutUserInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikesUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikesUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    productId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PengajuanUpdateWithoutUsersInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
    AccBy?: UsersUpdateOneRequiredWithoutAccByNestedInput
  }

  export type PengajuanUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
    accBy?: IntFieldUpdateOperationsInput | number
  }

  export type PengajuanUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
    accBy?: IntFieldUpdateOperationsInput | number
  }

  export type PengajuanUpdateWithoutAccByInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
    users?: UsersUpdateOneRequiredWithoutPengajuanNestedInput
  }

  export type PengajuanUncheckedUpdateWithoutAccByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type PengajuanUncheckedUpdateManyWithoutAccByInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiCreateManyProductInput = {
    id?: number
    userId: number
    status: number
  }

  export type ReviewCreateManyProductInput = {
    id?: number
    userId: number
    review: string
    rating: number
  }

  export type LikesCreateManyProductInput = {
    id?: number
    userId: number
    time: Date | string
  }

  export type TransaksiUpdateWithoutProductInput = {
    status?: IntFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutTransaksiNestedInput
  }

  export type TransaksiUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type TransaksiUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewUpdateWithoutProductInput = {
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
    user?: UsersUpdateOneRequiredWithoutReviewNestedInput
  }

  export type ReviewUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    review?: StringFieldUpdateOperationsInput | string
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type LikesUpdateWithoutProductInput = {
    time?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UsersUpdateOneRequiredWithoutLikesNestedInput
  }

  export type LikesUncheckedUpdateWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikesUncheckedUpdateManyWithoutProductInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    time?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UsersCreateManyAlmt_tkInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    gender?: number
    role?: number
    telp?: string
    buka_toko?: number
    nama_toko?: string
    klasifikasi_toko?: number
    rating_toko?: number
  }

  export type UsersUpdateWithoutAlmt_tkInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat?: AlamatUpdateManyWithoutUsersNestedInput
    product?: ProductUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUpdateManyWithoutUserNestedInput
    review?: ReviewUpdateManyWithoutUserNestedInput
    likes?: LikesUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateWithoutAlmt_tkInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
    alamat?: AlamatUncheckedUpdateManyWithoutUsersNestedInput
    product?: ProductUncheckedUpdateManyWithoutUserNestedInput
    transaksi?: TransaksiUncheckedUpdateManyWithoutUserNestedInput
    review?: ReviewUncheckedUpdateManyWithoutUserNestedInput
    likes?: LikesUncheckedUpdateManyWithoutUserNestedInput
    pengajuan?: PengajuanUncheckedUpdateManyWithoutUsersNestedInput
    accBy?: PengajuanUncheckedUpdateManyWithoutAccByNestedInput
  }

  export type UsersUncheckedUpdateManyWithoutAlmt_tkInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    gender?: IntFieldUpdateOperationsInput | number
    role?: IntFieldUpdateOperationsInput | number
    telp?: StringFieldUpdateOperationsInput | string
    buka_toko?: IntFieldUpdateOperationsInput | number
    nama_toko?: StringFieldUpdateOperationsInput | string
    klasifikasi_toko?: IntFieldUpdateOperationsInput | number
    rating_toko?: FloatFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}